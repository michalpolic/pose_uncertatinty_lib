function [ C_F ] = Ef_2AC( p1, p2, A1, A2, F, C )
%Ef_2AC - propagation of the uncertainty using (D. Barath - A Minimal Solution for Two-view Focal-length Estimation using Two Affine Correspondences)
% Input: 
%   p1  ...  2x2pts [u11 u12; v11 v12] (first image)
%   p2  ...  2x2pts [u21 u22; v21 v22] (second image)
%   A1  ...  2x2 affinity matrix [a1_1  a2_1  a3_1  a4_1] (row-major)
%   A2  ...  2x2 affinity matrix [a1_2  a2_2  a3_2  a4_2] (row-major)
%   F    ... the fundamental matrix
%   C    ... 16x16 covariance matrix of input points [u11 v11 u12 v12   u21 v21 u22 v22  a1_1 a2_1 a3_1 a4_1  a1_2 a2_2 a3_2 a4_2]
% Output:
%   C_F ... 9x9 covariance matrix of fundamental parameters [f1 f4 f7 f2 f5 f8 f3 f6 f9]


    % normalize F
    F = normalizeMatrix(F);
    
    % compute the derivatives
    A = deriv_measurements( p1(1),p1(2),p1(3),p1(4),...
                            p2(1),p2(2),p2(3),p2(4),...
                            A1(1),A1(2),A1(3),A1(4),...
                            A2(1),A2(2),A2(3),A2(4),...
                            F(1),F(2),F(3),F(4),F(5),F(6),F(7),F(8));
                        
    B = deriv_params(   p1(1),p1(2),p1(3),p1(4),...
                        p2(1),p2(2),p2(3),p2(4),...
                        A1(1),A1(2),A1(3),A1(4),...
                        A2(1),A2(2),A2(3),A2(4),...
                        F(1),F(2),F(3),F(4),F(5),F(6),F(7),F(8),F(9));
                   
    % the propagation
    S = diag(1./sqrt(sum(B'.^2)));
    iBA = (S*B) \ S * A;
    C_F = iBA * C * iBA';
end

function A = deriv_measurements(u11,v11,u12,v12, ...
                                u21,v21,u22,v22, ...
                                a1_1,a2_1,a3_1,a4_1, ...
                                a1_2,a2_2,a3_2,a4_2, ...
                                f11,f21,f31,f12,f22,f32,f13,f23)
    A = [f11 * u21 + f21 * v21 + f31 f12 * u21 + f22 * v21 + f32 0 0 f11 * u11 + f12 * v11 + f13 f21 * u11 + f22 * v11 + f23 0 0 0 0 0 0 0 0 0 0; 0 0 f11 * u22 + f21 * v22 + f31 f12 * u22 + f22 * v22 + f32 0 0 f11 * u12 + f12 * v12 + f13 f21 * u12 + f22 * v12 + f23 0 0 0 0 0 0 0 0; f11 * a1_1 + f21 * a3_1 f12 * a1_1 + f22 * a3_1 0 0 f11 f21 0 0 f11 * u11 + f12 * v11 + f13 0 f21 * u11 + f22 * v11 + f23 0 0 0 0 0; f11 * a2_1 + f21 * a4_1 f12 * a2_1 + f22 * a4_1 0 0 f12 f22 0 0 0 f11 * u11 + f12 * v11 + f13 0 f21 * u11 + f22 * v11 + f23 0 0 0 0; 0 0 f11 * a1_2 + f21 * a3_2 f12 * a1_2 + f22 * a3_2 0 0 f11 f21 0 0 0 0 f11 * u12 + f12 * v12 + f13 0 f21 * u12 + f22 * v12 + f23 0; 0 0 f11 * a2_2 + f21 * a4_2 f12 * a2_2 + f22 * a4_2 0 0 f12 f22 0 0 0 0 0 f11 * u12 + f12 * v12 + f13 0 f21 * u12 + f22 * v12 + f23; 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;];
end

function B = deriv_params(  u11,v11,u12,v12, ...
                            u21,v21,u22,v22, ...
                            a1_1,a2_1,a3_1,a4_1, ...
                            a1_2,a2_2,a3_2,a4_2, ...
                            f11,f21,f31,f12,f22,f32,f13,f23,f33)
    B = [u21 * u11 v21 * u11 u11 v11 * u21 v21 * v11 v11 u21 v21 1; u22 * u12 v22 * u12 u12 v12 * u22 v22 * v12 v12 u22 v22 1; u11 * a1_1 + u21 u11 * a3_1 + v21 1 v11 * a1_1 v11 * a3_1 0 a1_1 a3_1 0; u11 * a2_1 u11 * a4_1 0 v11 * a2_1 + u21 v11 * a4_1 + v21 1 a2_1 a4_1 0; u12 * a1_2 + u22 u12 * a3_2 + v22 1 v12 * a1_2 v12 * a3_2 0 a1_2 a3_2 0; u12 * a2_2 u12 * a4_2 0 v12 * a2_2 + u22 v12 * a4_2 + v22 1 a2_2 a4_2 0; f22 * f33 - f23 * f32 -f12 * f33 + f13 * f32 f12 * f23 - f13 * f22 -f21 * f33 + f23 * f31 f11 * f33 - f13 * f31 -f11 * f23 + f13 * f21 f21 * f32 - f22 * f31 -f11 * f32 + f12 * f31 f11 * f22 - f12 * f21; ((f11 ^ 2) + (f12 ^ 2) + (f13 ^ 2) + (f21 ^ 2) + (f22 ^ 2) + (f23 ^ 2) + (f31 ^ 2) + (f32 ^ 2) + f33 ^ 2) ^ (-0.1e1 / 0.2e1) * f11 ((f11 ^ 2) + (f12 ^ 2) + (f13 ^ 2) + (f21 ^ 2) + (f22 ^ 2) + (f23 ^ 2) + (f31 ^ 2) + (f32 ^ 2) + f33 ^ 2) ^ (-0.1e1 / 0.2e1) * f21 ((f11 ^ 2) + (f12 ^ 2) + (f13 ^ 2) + (f21 ^ 2) + (f22 ^ 2) + (f23 ^ 2) + (f31 ^ 2) + (f32 ^ 2) + f33 ^ 2) ^ (-0.1e1 / 0.2e1) * f31 ((f11 ^ 2) + (f12 ^ 2) + (f13 ^ 2) + (f21 ^ 2) + (f22 ^ 2) + (f23 ^ 2) + (f31 ^ 2) + (f32 ^ 2) + f33 ^ 2) ^ (-0.1e1 / 0.2e1) * f12 ((f11 ^ 2) + (f12 ^ 2) + (f13 ^ 2) + (f21 ^ 2) + (f22 ^ 2) + (f23 ^ 2) + (f31 ^ 2) + (f32 ^ 2) + f33 ^ 2) ^ (-0.1e1 / 0.2e1) * f22 ((f11 ^ 2) + (f12 ^ 2) + (f13 ^ 2) + (f21 ^ 2) + (f22 ^ 2) + (f23 ^ 2) + (f31 ^ 2) + (f32 ^ 2) + f33 ^ 2) ^ (-0.1e1 / 0.2e1) * f32 ((f11 ^ 2) + (f12 ^ 2) + (f13 ^ 2) + (f21 ^ 2) + (f22 ^ 2) + (f23 ^ 2) + (f31 ^ 2) + (f32 ^ 2) + f33 ^ 2) ^ (-0.1e1 / 0.2e1) * f13 ((f11 ^ 2) + (f12 ^ 2) + (f13 ^ 2) + (f21 ^ 2) + (f22 ^ 2) + (f23 ^ 2) + (f31 ^ 2) + (f32 ^ 2) + f33 ^ 2) ^ (-0.1e1 / 0.2e1) * f23 ((f11 ^ 2) + (f12 ^ 2) + (f13 ^ 2) + (f21 ^ 2) + (f22 ^ 2) + (f23 ^ 2) + (f31 ^ 2) + (f32 ^ 2) + f33 ^ 2) ^ (-0.1e1 / 0.2e1) * f33; f31 * f13 ^ 3 - 2 * f11 * f33 * f13 ^ 2 + (-f31 ^ 3 + (f23 ^ 2 - f32 ^ 2) * f31 - 2 * f33 * f21 * f23) * f13 + 2 * f31 * f33 * (f11 * f31 + f12 * f32) f31 * f23 ^ 3 - 2 * f33 * f21 * f23 ^ 2 + (-f31 ^ 3 + (f13 ^ 2 - f32 ^ 2) * f31 - 2 * f11 * f13 * f33) * f23 + 2 * f31 * f33 * (f21 * f31 + f22 * f32) 2 * f11 ^ 2 * f31 * f33 + (f13 ^ 3 + (f23 ^ 2 - 3 * f31 ^ 2 - f32 ^ 2) * f13 + 2 * f12 * f32 * f33) * f11 + f21 * f23 * f13 ^ 2 - 2 * f12 * f13 * f31 * f32 + 2 * f21 ^ 2 * f31 * f33 + (f23 ^ 3 + (-3 * f31 ^ 2 - f32 ^ 2) * f23 + 2 * f22 * f32 * f33) * f21 - 2 * f22 * f23 * f31 * f32 f32 * f13 ^ 3 - 2 * f12 * f33 * f13 ^ 2 + (-f32 ^ 3 + (f23 ^ 2 - f31 ^ 2) * f32 - 2 * f33 * f22 * f23) * f13 + 2 * f32 * f33 * (f11 * f31 + f12 * f32) f32 * f23 ^ 3 - 2 * f33 * f22 * f23 ^ 2 + (-f32 ^ 3 + (f13 ^ 2 - f31 ^ 2) * f32 - 2 * f12 * f13 * f33) * f23 + 2 * f32 * f33 * (f21 * f31 + f22 * f32) 2 * f12 ^ 2 * f32 * f33 + (f13 ^ 3 + (f23 ^ 2 - f31 ^ 2 - 3 * f32 ^ 2) * f13 + 2 * f11 * f31 * f33) * f12 + f22 * f23 * f13 ^ 2 - 2 * f11 * f13 * f31 * f32 + 2 * f22 ^ 2 * f32 * f33 + (f23 ^ 3 + (-f31 ^ 2 - 3 * f32 ^ 2) * f23 + 2 * f21 * f31 * f33) * f22 - 2 * f21 * f23 * f31 * f32 -2 * f11 ^ 2 * f13 * f33 + (3 * f13 ^ 2 * f31 - 2 * f33 * f21 * f23 + f31 * f23 ^ 2 - f31 ^ 3 - f31 * f32 ^ 2) * f11 - 2 * f12 ^ 2 * f13 * f33 + (3 * f13 ^ 2 * f32 - 2 * f33 * f22 * f23 + f32 * f23 ^ 2 - f31 ^ 2 * f32 - f32 ^ 3) * f12 + 2 * f13 * f23 * (f21 * f31 + f22 * f32) (f21 * f31 + f22 * f32) * f13 ^ 2 + (-2 * f11 * f21 * f33 - 2 * f12 * f33 * f22 + 2 * (f11 * f31 + f12 * f32) * f23) * f13 - 2 * f21 ^ 2 * f23 * f33 + (3 * f31 * f23 ^ 2 - f31 ^ 3 - f31 * f32 ^ 2) * f21 - 2 * f22 ^ 2 * f23 * f33 + (3 * f32 * f23 ^ 2 - f31 ^ 2 * f32 - f32 ^ 3) * f22 (-f13 ^ 2 + f31 ^ 2) * f11 ^ 2 + (2 * f32 * f12 * f31 - 2 * f13 * f21 * f23) * f11 + (-f13 ^ 2 + f32 ^ 2) * f12 ^ 2 - 2 * f12 * f13 * f22 * f23 + (-f23 ^ 2 + f31 ^ 2) * f21 ^ 2 + 2 * f21 * f22 * f31 * f32 + (-f23 ^ 2 + f32 ^ 2) * f22 ^ 2;];
end