function [ C_E ] = Ef_2AC_br( p1, p2, A1, A2, b, aa, f, C )
%E_2AC - propagate the uncertainty from 2 affine correspondences into the
% uncertatinty of essential matrix
% Note, that we assume first 5 out of 6 eqn to derive constrains on E.
% Input: 
%   p1  ...  2x2pts [u11 u12; v11 v12] (first image)
%   p2  ...  2x2pts [u21 u22; v21 v22] (second image)
%   A1  ...  2x2 affinity matrix [a11_1 a12_1 a21_1 a22_1]
%   A2  ...  2x2 affinity matrix [a11_2 a12_2 a21_2 a22_2]
%   E   ...  the essential matrix
%   C   ...  16x16 covariance matrix of input points [u11 v11 u12 v12 u21 v21 u22 v22  a11_1 a12_1 a21_1 a22_1  a11_2 a12_2 a21_2 a22_2]
% Output:
%   C_E ... 8x8 covariance matrix of essential matrix parameters [e11 e12 e13 e21 e22 e23 e31 e32]

    % decompose
%     [b, ~, aa] = bR_from_E_uv(E, a2h(p1)', a2h(p2)');                 

    
    A = deriv_measurements(p1(1),p1(2),p1(3),p1(4),...
                           p2(1),p2(2),p2(3),p2(4),...
                           A1(1),A1(2),A1(3),A1(4),...
                           A2(1),A2(2),A2(3),A2(4),...
                           aa(1),aa(2),aa(3),b(1),b(2),b(3),f);
                       
    B = deriv_params(  p1(1),p1(2),p1(3),p1(4),...
                       p2(1),p2(2),p2(3),p2(4),...
                       A1(1),A1(2),A1(3),A1(4),...
                       A2(1),A2(2),A2(3),A2(4),...
                       aa(1),aa(2),aa(3),b(1),b(2),b(3),f);
   
    % the propagation
    S = diag(1./sqrt(sum(B'.^2)));
    iBA = (S*B) \ S * A;
    C_E = iBA * C * iBA';
end



function A = deriv_measurements(u11, v11, u12, v12, ...
                                u21, v21, u22, v22,...
                                a1_1, a2_1, a3_1, a4_1,...
                                a1_2, a2_2, a3_2, a4_2,...
                                aa1, aa2, aa3, b1, b2, b3,f)                  
    A = [(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) * f * ((((b1 * v21 - b2 * u21) * aa2 - b3 * aa3 * u21) * f + aa3 * b1) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((((b3 * u21 * aa2 + aa3 * (b1 * v21 - b2 * u21)) * aa1 + b3 * v21 * (aa2 ^ 2 + aa3 ^ 2)) * f - b1 * aa1 * aa2 - b2 * (aa2 ^ 2 + aa3 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - aa1 * ((-v21 * b3 * aa1 + b3 * u21 * aa2 + aa3 * (b1 * v21 - b2 * u21)) * f - aa2 * b1 + aa1 * b2))) (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) * f * (-(((b1 * v21 - b2 * u21) * aa1 + v21 * b3 * aa3) * f - aa3 * b2) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((-b3 * u21 * aa1 ^ 2 - v21 * b3 * aa2 * aa1 + ((b1 * v21 - b2 * u21) * aa2 - b3 * aa3 * u21) * aa3) * f + b1 * aa1 ^ 2 + aa3 ^ 2 * b1 + aa1 * aa2 * b2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((-v21 * b3 * aa1 + b3 * u21 * aa2 + aa3 * (b1 * v21 - b2 * u21)) * f - aa2 * b1 + aa1 * b2) * aa2) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) 0 0 -f * (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((v11 * b2 * aa1 - u11 * (aa2 * b2 + aa3 * b3)) * f + b3 * aa1) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((v11 * b3 * aa1 ^ 2 + u11 * (-b3 * aa2 + aa3 * b2) * aa1 + aa3 * v11 * (aa2 * b2 + aa3 * b3)) * f - aa1 ^ 2 * b2 - b2 * aa2 ^ 2 - aa2 * aa3 * b3) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-b3 * aa2 + aa3 * b2) * ((aa1 * u11 + aa2 * v11) * f + aa3))) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa1 * b1 * v11 - aa2 * b1 * u11 + aa3 * b3 * v11) * f - b3 * aa2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((((-aa2 * b3 * v11 + aa3 * b1 * u11) * aa1 + b3 * u11 * aa2 ^ 2 + v11 * aa3 * b1 * aa2 + b3 * aa3 ^ 2 * u11) * f - b1 * aa1 ^ 2 - aa2 ^ 2 * b1 - aa1 * aa3 * b3) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-b3 * aa1 + aa3 * b1) * ((aa1 * u11 + aa2 * v11) * f + aa3))) * f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) 0 0 0 0 0 0 0 0 0 0; 0 0 (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) * f * ((((b1 * v22 - b2 * u22) * aa2 - b3 * aa3 * u22) * f + aa3 * b1) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((((b3 * u22 * aa2 + aa3 * (b1 * v22 - b2 * u22)) * aa1 + b3 * v22 * (aa2 ^ 2 + aa3 ^ 2)) * f - b1 * aa1 * aa2 - b2 * (aa2 ^ 2 + aa3 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - aa1 * ((-v22 * b3 * aa1 + b3 * u22 * aa2 + aa3 * (b1 * v22 - b2 * u22)) * f - aa2 * b1 + aa1 * b2))) (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) * f * (-(((b1 * v22 - b2 * u22) * aa1 + v22 * b3 * aa3) * f - aa3 * b2) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((-b3 * u22 * aa1 ^ 2 - v22 * b3 * aa2 * aa1 + ((b1 * v22 - b2 * u22) * aa2 - b3 * aa3 * u22) * aa3) * f + b1 * aa1 ^ 2 + aa3 ^ 2 * b1 + aa1 * aa2 * b2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((-v22 * b3 * aa1 + b3 * u22 * aa2 + aa3 * (b1 * v22 - b2 * u22)) * f - aa2 * b1 + aa1 * b2) * aa2) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) 0 0 -f * (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((v12 * b2 * aa1 - u12 * (aa2 * b2 + aa3 * b3)) * f + b3 * aa1) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((v12 * b3 * aa1 ^ 2 + u12 * (-b3 * aa2 + aa3 * b2) * aa1 + aa3 * v12 * (aa2 * b2 + aa3 * b3)) * f - aa1 ^ 2 * b2 - b2 * aa2 ^ 2 - aa2 * aa3 * b3) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-b3 * aa2 + aa3 * b2) * ((aa1 * u12 + aa2 * v12) * f + aa3))) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa1 * b1 * v12 - aa2 * b1 * u12 + aa3 * b3 * v12) * f - b3 * aa2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((((-aa2 * b3 * v12 + aa3 * b1 * u12) * aa1 + b3 * u12 * aa2 ^ 2 + v12 * aa3 * b1 * aa2 + b3 * aa3 ^ 2 * u12) * f - b1 * aa1 ^ 2 - aa2 ^ 2 * b1 - aa1 * aa3 * b3) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-b3 * aa1 + aa3 * b1) * ((aa1 * u12 + aa2 * v12) * f + aa3))) * f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) 0 0 0 0 0 0 0 0; (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) * f ^ 2 * (((-aa2 * b2 - aa3 * b3) * a1_1 + a3_1 * aa2 * b1) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((-aa1 * (-b3 * aa2 + aa3 * b2) * a1_1 + a3_1 * (b1 * aa1 * aa3 + b3 * (aa2 ^ 2 + aa3 ^ 2))) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((b3 * aa2 - aa3 * b2) * a1_1 + (-b3 * aa1 + aa3 * b1) * a3_1) * aa1)) (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) * f ^ 2 * (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa1 * b1 + aa3 * b3) * a3_1 - a1_1 * aa1 * b2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa2 * (-b3 * aa1 + aa3 * b1) * a3_1 - a1_1 * (aa1 ^ 2 * b3 + b2 * aa2 * aa3 + aa3 ^ 2 * b3)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((-b3 * aa1 + aa3 * b1) * a3_1 - a1_1 * (-b3 * aa2 + aa3 * b2)) * aa2)) 0 0 -f ^ 2 * ((aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (aa2 * b2 + aa3 * b3) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + aa1 * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - 0.1e1) * (-b3 * aa2 + aa3 * b2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) f ^ 2 * (sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (b1 * aa1 * aa3 + b3 * (aa2 ^ 2 + aa3 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + b1 * aa2 * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - aa1 * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (-b3 * aa1 + aa3 * b1)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) 0 0 -f * (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((v11 * b2 * aa1 - u11 * (aa2 * b2 + aa3 * b3)) * f + b3 * aa1) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((v11 * b3 * aa1 ^ 2 + u11 * (-b3 * aa2 + aa3 * b2) * aa1 + aa3 * v11 * (aa2 * b2 + aa3 * b3)) * f - aa1 ^ 2 * b2 - b2 * aa2 ^ 2 - aa2 * aa3 * b3) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-b3 * aa2 + aa3 * b2) * ((aa1 * u11 + aa2 * v11) * f + aa3))) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) 0 (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa1 * b1 * v11 - aa2 * b1 * u11 + aa3 * b3 * v11) * f - b3 * aa2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((((-aa2 * b3 * v11 + aa3 * b1 * u11) * aa1 + b3 * u11 * aa2 ^ 2 + v11 * aa3 * b1 * aa2 + b3 * aa3 ^ 2 * u11) * f - b1 * aa1 ^ 2 - aa2 ^ 2 * b1 - aa1 * aa3 * b3) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-b3 * aa1 + aa3 * b1) * ((aa1 * u11 + aa2 * v11) * f + aa3))) * f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) 0 0 0 0 0; (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) * f ^ 2 * (((-aa2 * b2 - aa3 * b3) * a2_1 + a4_1 * aa2 * b1) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((-aa1 * (-b3 * aa2 + aa3 * b2) * a2_1 + a4_1 * (b1 * aa1 * aa3 + b3 * (aa2 ^ 2 + aa3 ^ 2))) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((b3 * aa2 - aa3 * b2) * a2_1 + (-b3 * aa1 + aa3 * b1) * a4_1) * aa1)) (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) * f ^ 2 * (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa1 * b1 + aa3 * b3) * a4_1 - a2_1 * aa1 * b2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa2 * (-b3 * aa1 + aa3 * b1) * a4_1 - a2_1 * (aa1 ^ 2 * b3 + b2 * aa2 * aa3 + aa3 ^ 2 * b3)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((-b3 * aa1 + aa3 * b1) * a4_1 - a2_1 * (-b3 * aa2 + aa3 * b2)) * aa2)) 0 0 f ^ 2 * (-(b2 * aa2 * aa3 + b3 * (aa1 ^ 2 + aa3 ^ 2)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + b2 * aa1 * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + aa2 * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (-b3 * aa2 + aa3 * b2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) -f ^ 2 * ((aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (aa1 * b1 + aa3 * b3) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - aa2 * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - 0.1e1) * (-b3 * aa1 + aa3 * b1)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) 0 0 0 -f * (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((v11 * b2 * aa1 - u11 * (aa2 * b2 + aa3 * b3)) * f + b3 * aa1) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((v11 * b3 * aa1 ^ 2 + u11 * (-b3 * aa2 + aa3 * b2) * aa1 + aa3 * v11 * (aa2 * b2 + aa3 * b3)) * f - aa1 ^ 2 * b2 - b2 * aa2 ^ 2 - aa2 * aa3 * b3) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-b3 * aa2 + aa3 * b2) * ((aa1 * u11 + aa2 * v11) * f + aa3))) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) 0 (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa1 * b1 * v11 - aa2 * b1 * u11 + aa3 * b3 * v11) * f - b3 * aa2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((((-aa2 * b3 * v11 + aa3 * b1 * u11) * aa1 + b3 * u11 * aa2 ^ 2 + v11 * aa3 * b1 * aa2 + b3 * aa3 ^ 2 * u11) * f - b1 * aa1 ^ 2 - aa2 ^ 2 * b1 - aa1 * aa3 * b3) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-b3 * aa1 + aa3 * b1) * ((aa1 * u11 + aa2 * v11) * f + aa3))) * f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) 0 0 0 0; 0 0 (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) * f ^ 2 * (((-aa2 * b2 - aa3 * b3) * a1_2 + a3_2 * aa2 * b1) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((-aa1 * (-b3 * aa2 + aa3 * b2) * a1_2 + a3_2 * (b1 * aa1 * aa3 + b3 * (aa2 ^ 2 + aa3 ^ 2))) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((b3 * aa2 - aa3 * b2) * a1_2 + (-b3 * aa1 + aa3 * b1) * a3_2) * aa1)) (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) * f ^ 2 * (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa1 * b1 + aa3 * b3) * a3_2 - a1_2 * aa1 * b2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa2 * (-b3 * aa1 + aa3 * b1) * a3_2 - a1_2 * (aa1 ^ 2 * b3 + b2 * aa2 * aa3 + aa3 ^ 2 * b3)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((-b3 * aa1 + aa3 * b1) * a3_2 - a1_2 * (-b3 * aa2 + aa3 * b2)) * aa2)) 0 0 -f ^ 2 * ((aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (aa2 * b2 + aa3 * b3) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + aa1 * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - 0.1e1) * (-b3 * aa2 + aa3 * b2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) f ^ 2 * (sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (b1 * aa1 * aa3 + b3 * (aa2 ^ 2 + aa3 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + b1 * aa2 * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - aa1 * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (-b3 * aa1 + aa3 * b1)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) 0 0 0 0 -f * (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((v12 * b2 * aa1 - u12 * (aa2 * b2 + aa3 * b3)) * f + b3 * aa1) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((v12 * b3 * aa1 ^ 2 + u12 * (-b3 * aa2 + aa3 * b2) * aa1 + aa3 * v12 * (aa2 * b2 + aa3 * b3)) * f - aa1 ^ 2 * b2 - b2 * aa2 ^ 2 - aa2 * aa3 * b3) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-b3 * aa2 + aa3 * b2) * ((aa1 * u12 + aa2 * v12) * f + aa3))) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) 0 (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa1 * b1 * v12 - aa2 * b1 * u12 + aa3 * b3 * v12) * f - b3 * aa2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((((-aa2 * b3 * v12 + aa3 * b1 * u12) * aa1 + b3 * u12 * aa2 ^ 2 + v12 * aa3 * b1 * aa2 + b3 * aa3 ^ 2 * u12) * f - b1 * aa1 ^ 2 - aa2 ^ 2 * b1 - aa1 * aa3 * b3) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-b3 * aa1 + aa3 * b1) * ((aa1 * u12 + aa2 * v12) * f + aa3))) * f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) 0; 0 0 (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) * f ^ 2 * (((-aa2 * b2 - aa3 * b3) * a2_2 + a4_2 * aa2 * b1) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((-aa1 * (-b3 * aa2 + aa3 * b2) * a2_2 + a4_2 * (b1 * aa1 * aa3 + b3 * (aa2 ^ 2 + aa3 ^ 2))) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((b3 * aa2 - aa3 * b2) * a2_2 + (-b3 * aa1 + aa3 * b1) * a4_2) * aa1)) (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) * f ^ 2 * (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa1 * b1 + aa3 * b3) * a4_2 - a2_2 * aa1 * b2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa2 * (-b3 * aa1 + aa3 * b1) * a4_2 - a2_2 * (aa1 ^ 2 * b3 + b2 * aa2 * aa3 + aa3 ^ 2 * b3)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((-b3 * aa1 + aa3 * b1) * a4_2 - a2_2 * (-b3 * aa2 + aa3 * b2)) * aa2)) 0 0 f ^ 2 * (-(b2 * aa2 * aa3 + b3 * (aa1 ^ 2 + aa3 ^ 2)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + b2 * aa1 * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + aa2 * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (-b3 * aa2 + aa3 * b2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) -f ^ 2 * ((aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (aa1 * b1 + aa3 * b3) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - aa2 * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - 0.1e1) * (-b3 * aa1 + aa3 * b1)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) 0 0 0 0 0 -f * (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((v12 * b2 * aa1 - u12 * (aa2 * b2 + aa3 * b3)) * f + b3 * aa1) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((v12 * b3 * aa1 ^ 2 + u12 * (-b3 * aa2 + aa3 * b2) * aa1 + aa3 * v12 * (aa2 * b2 + aa3 * b3)) * f - aa1 ^ 2 * b2 - b2 * aa2 ^ 2 - aa2 * aa3 * b3) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-b3 * aa2 + aa3 * b2) * ((aa1 * u12 + aa2 * v12) * f + aa3))) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) 0 (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa1 * b1 * v12 - aa2 * b1 * u12 + aa3 * b3 * v12) * f - b3 * aa2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((((-aa2 * b3 * v12 + aa3 * b1 * u12) * aa1 + b3 * u12 * aa2 ^ 2 + v12 * aa3 * b1 * aa2 + b3 * aa3 ^ 2 * u12) * f - b1 * aa1 ^ 2 - aa2 ^ 2 * b1 - aa1 * aa3 * b3) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-b3 * aa1 + aa3 * b1) * ((aa1 * u12 + aa2 * v12) * f + aa3))) * f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1); 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;];
end

function B = deriv_params(  u11, v11, u12, v12, ...
                            u21, v21, u22, v22,...
                            a1_1, a2_1, a3_1, a4_1,...
                            a1_2, a2_2, a3_2, a4_2,...
                            aa1, aa2, aa3, b1, b2, b3,f)      
    B = [(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) * (-(v21 * (aa1 * v11 - aa2 * u11) * f ^ 2 - aa3 * u11 * f + aa1) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((aa3 * v21 * (aa1 * u11 + aa2 * v11) * f ^ 2 + ((v11 - v21) * aa1 ^ 2 - u11 * aa2 * aa1 - v21 * aa2 ^ 2 + aa3 ^ 2 * v11) * f - aa3 * aa2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (aa3 * f * v21 - aa2) * ((aa1 * u11 + aa2 * v11) * f + aa3)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) -(-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (u21 * (aa1 * v11 - aa2 * u11) * f ^ 2 + aa3 * v11 * f - aa2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((aa3 * u21 * (aa1 * u11 + aa2 * v11) * f ^ 2 + (-u21 * aa1 ^ 2 - v11 * aa2 * aa1 + (u11 - u21) * aa2 ^ 2 + aa3 ^ 2 * u11) * f - aa3 * aa1) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (aa3 * f * u21 - aa1) * ((aa1 * u11 + aa2 * v11) * f + aa3)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) -f * ((aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (aa3 * (u11 * u21 + v11 * v21) * f - aa1 * u21 - aa2 * v21) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((v11 * u21 * aa1 ^ 2 - aa2 * (u11 * u21 - v11 * v21) * aa1 - v21 * u11 * aa2 ^ 2 - aa3 ^ 2 * (u11 * v21 - u21 * v11)) * f + aa3 * (aa1 * v21 - aa2 * u21)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (aa1 * v21 - aa2 * u21) * ((aa1 * u11 + aa2 * v11) * f + aa3))) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) -(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * ((aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((-b3 * u21 * v11 * aa1 ^ 3 + (-b3 * (-u11 * u21 + v11 * v21) * aa2 + aa3 * u11 * (b1 * v21 - b2 * u21)) * aa1 ^ 2 + (v21 * b3 * u11 * aa2 ^ 2 + (b1 * v21 - b2 * u21) * (aa3 * v11 + u11) * aa2 - aa3 * b3 * ((-u11 * v21 + u21 * v11) * aa3 + v11 * v21 + u11 * u21)) * aa1 + v11 * (aa2 ^ 2 + aa3 ^ 2) * (b1 * v21 - b2 * u21)) * f ^ 2 + ((v11 * b1 - b1 * v21 + b2 * u21) * aa1 ^ 3 + ((-b1 * u11 + v11 * b2) * aa2 - v21 * b3 * aa3) * aa1 ^ 2 + ((-b1 * v21 - b2 * u11 + b2 * u21) * aa2 ^ 2 + b3 * (aa3 * u21 + v21) * aa2 + aa3 * (aa3 * (v11 * b1 - b2 * u11) + v11 * b2 + b1 * u11)) * aa1 - b3 * u21 * (aa2 ^ 2 + aa3 ^ 2)) * f + b2 * aa1 ^ 2 * aa3 - aa2 * (aa3 * b1 + b2) * aa1 + b1 * (aa2 ^ 2 + aa3 ^ 2)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((v11 * (b1 * v21 - b2 * u21) * aa1 ^ 4 + (-u11 * (b1 * v21 - b2 * u21) * aa2 + b3 * aa3 * (u11 * u21 + v11 * v21)) * aa1 ^ 3 + (v11 * (b1 * v21 - b2 * u21) * aa2 ^ 2 - b3 * (-u11 * u21 + v11 * v21) * aa2 + aa3 * (b1 * v21 - b2 * u21) * (aa3 * v11 + u11)) * aa1 ^ 2 + (-u11 * (b1 * v21 - b2 * u21) * aa2 ^ 3 + ((u11 * u21 + v11 * v21) * aa3 + 0.2e1 * u21 * v11 + 0.2e1 * u11 * v21) * b3 * aa2 ^ 2 + 0.2e1 * (-aa3 * u11 / 0.2e1 + v11) * aa3 * (b1 * v21 - b2 * u21) * aa2 + ((u11 * u21 + v11 * v21) * aa3 + 0.2e1 * u11 * v21) * aa3 ^ 2 * b3) * aa1 + (b3 * (-u11 * u21 + v11 * v21) * aa2 - aa3 * u11 * (b1 * v21 - b2 * u21)) * (aa2 ^ 2 + aa3 ^ 2)) * f ^ 2 + (-b3 * aa1 ^ 4 * u21 + (-v21 * b3 * aa2 - aa3 * (b1 * u11 + v11 * b2)) * aa1 ^ 3 + (-b3 * aa2 ^ 2 * u21 + (-b1 * u11 + v11 * b2) * aa2 - b3 * aa3 * (aa3 * u21 + v21)) * aa1 ^ 2 + (-v21 * b3 * aa2 ^ 3 + ((-b1 * u11 - v11 * b2) * aa3 - 0.2e1 * v11 * b1 - 0.2e1 * b2 * u11) * aa2 ^ 2 - b3 * aa3 * (aa3 * v21 - 0.2e1 * u21) * aa2 - (aa3 * (b1 * u11 + v11 * b2) - 0.2e1 * b1 * v21 + 0.2e1 * b2 * u11 + 0.2e1 * b2 * u21) * aa3 ^ 2) * aa1 - ((-b1 * u11 + v11 * b2) * aa2 - v21 * b3 * aa3) * (aa2 ^ 2 + aa3 ^ 2)) * f + b1 * aa1 ^ 4 + b2 * aa1 ^ 3 * aa2 + (aa2 ^ 2 * b1 + aa3 * (aa3 * b1 + b2)) * aa1 ^ 2 + (b2 * aa2 ^ 3 + (aa3 ^ 2 * b2 - 0.2e1 * aa3 * b1) * aa2) * aa1 - b2 * aa3 * (aa2 ^ 2 + aa3 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((b3 * (-u11 * u21 + v11 * v21) * aa2 - aa3 * u11 * (b1 * v21 - b2 * u21)) * aa1 ^ 2 + (-0.2e1 * b3 * (u11 * v21 + u21 * v11) * aa2 ^ 2 - 0.2e1 * v11 * aa3 * (b1 * v21 - b2 * u21) * aa2 - 0.2e1 * v21 * b3 * aa3 ^ 2 * u11) * aa1 - (b3 * (-u11 * u21 + v11 * v21) * aa2 - aa3 * u11 * (b1 * v21 - b2 * u21)) * (aa2 ^ 2 + aa3 ^ 2)) * f ^ 2 + (((b1 * u11 - v11 * b2) * aa2 + v21 * b3 * aa3) * aa1 ^ 2 + ((0.2e1 * v11 * b1 + 0.2e1 * b2 * u11) * aa2 ^ 2 - 0.2e1 * b3 * aa3 * u21 * aa2 - 0.2e1 * aa3 ^ 2 * (b1 * v21 - b2 * u11 - b2 * u21)) * aa1 + ((-b1 * u11 + v11 * b2) * aa2 - v21 * b3 * aa3) * (aa2 ^ 2 + aa3 ^ 2)) * f + 0.2e1 * (-aa1 ^ 2 * b2 / 0.2e1 + b1 * aa1 * aa2 + b2 * (aa2 ^ 2 + aa3 ^ 2) / 0.2e1) * aa3) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) -(-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((-v21 * b3 * u11 * aa2 ^ 3 + (b3 * (-u11 * u21 + v11 * v21) * aa1 - v11 * aa3 * (b1 * v21 - b2 * u21)) * aa2 ^ 2 + (v11 * b3 * u21 * aa1 ^ 2 + (b1 * v21 - b2 * u21) * (-aa3 * u11 + v11) * aa1 + aa3 * b3 * ((-u11 * v21 + u21 * v11) * aa3 + v11 * v21 + u11 * u21)) * aa2 + u11 * (aa1 ^ 2 + aa3 ^ 2) * (b1 * v21 - b2 * u21)) * f ^ 2 + ((b1 * v21 + b2 * u11 - b2 * u21) * aa2 ^ 3 + ((b1 * u11 - v11 * b2) * aa1 - b3 * aa3 * u21) * aa2 ^ 2 + ((-v11 * b1 + b1 * v21 - b2 * u21) * aa1 ^ 2 + b3 * (aa3 * v21 - u21) * aa1 - aa3 * (aa3 * (v11 * b1 - b2 * u11) + v11 * b2 + b1 * u11)) * aa2 + v21 * b3 * (aa1 ^ 2 + aa3 ^ 2)) * f + b1 * aa2 ^ 2 * aa3 + aa1 * (-aa3 * b2 + b1) * aa2 - b2 * (aa1 ^ 2 + aa3 ^ 2)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((-u11 * (b1 * v21 - b2 * u21) * aa2 ^ 4 + (v11 * (b1 * v21 - b2 * u21) * aa1 + b3 * aa3 * (u11 * u21 + v11 * v21)) * aa2 ^ 3 + (-u11 * (b1 * v21 - b2 * u21) * aa1 ^ 2 - b3 * (-u11 * u21 + v11 * v21) * aa1 + aa3 * (b1 * v21 - b2 * u21) * (-aa3 * u11 + v11)) * aa2 ^ 2 + (v11 * (b1 * v21 - b2 * u21) * aa1 ^ 3 + ((u11 * u21 + v11 * v21) * aa3 - 0.2e1 * u21 * v11 - 0.2e1 * u11 * v21) * b3 * aa1 ^ 2 + aa3 * (b1 * v21 - b2 * u21) * (aa3 * v11 + 0.2e1 * u11) * aa1 + aa3 ^ 2 * b3 * ((u11 * u21 + v11 * v21) * aa3 - 0.2e1 * u21 * v11)) * aa2 - (-b3 * (-u11 * u21 + v11 * v21) * aa1 + v11 * aa3 * (b1 * v21 - b2 * u21)) * (aa1 ^ 2 + aa3 ^ 2)) * f ^ 2 + (-v21 * b3 * aa2 ^ 4 + (-b3 * u21 * aa1 - aa3 * (b1 * u11 + v11 * b2)) * aa2 ^ 3 + (-b3 * aa1 ^ 2 * v21 + (-b1 * u11 + v11 * b2) * aa1 - b3 * aa3 * (aa3 * v21 - u21)) * aa2 ^ 2 + (-aa1 ^ 3 * b3 * u21 + ((-b1 * u11 - v11 * b2) * aa3 + 0.2e1 * v11 * b1 + 0.2e1 * b2 * u11) * aa1 ^ 2 - 0.2e1 * aa3 * b3 * (aa3 * u21 / 0.2e1 + v21) * aa1 + 0.2e1 * aa3 ^ 2 * ((-v11 * b2 / 0.2e1 - b1 * u11 / 0.2e1) * aa3 + v11 * b1 + b1 * v21 - b2 * u21)) * aa2 - ((-b1 * u11 + v11 * b2) * aa1 + b3 * aa3 * u21) * (aa1 ^ 2 + aa3 ^ 2)) * f + b2 * aa2 ^ 4 + b1 * aa1 * aa2 ^ 3 + (aa1 ^ 2 * b2 + aa3 ^ 2 * b2 - aa3 * b1) * aa2 ^ 2 + aa1 * (b1 * aa1 ^ 2 + aa3 * (aa3 * b1 + 0.2e1 * b2)) * aa2 + aa3 * b1 * (aa1 ^ 2 + aa3 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((b3 * (-u11 * u21 + v11 * v21) * aa1 - v11 * aa3 * (b1 * v21 - b2 * u21)) * aa2 ^ 2 + (0.2e1 * b3 * (u11 * v21 + u21 * v11) * aa1 ^ 2 - 0.2e1 * aa3 * u11 * (b1 * v21 - b2 * u21) * aa1 + 0.2e1 * v11 * b3 * aa3 ^ 2 * u21) * aa2 + (-b3 * (-u11 * u21 + v11 * v21) * aa1 + v11 * aa3 * (b1 * v21 - b2 * u21)) * (aa1 ^ 2 + aa3 ^ 2)) * f ^ 2 + (((b1 * u11 - v11 * b2) * aa1 - b3 * aa3 * u21) * aa2 ^ 2 + ((-0.2e1 * v11 * b1 - 0.2e1 * b2 * u11) * aa1 ^ 2 + 0.2e1 * v21 * b3 * aa1 * aa3 - 0.2e1 * aa3 ^ 2 * (v11 * b1 + b1 * v21 - b2 * u21)) * aa2 + ((-b1 * u11 + v11 * b2) * aa1 + b3 * aa3 * u21) * (aa1 ^ 2 + aa3 ^ 2)) * f - (-aa2 ^ 2 * b1 + 0.2e1 * aa1 * aa2 * b2 + b1 * (aa1 ^ 2 + aa3 ^ 2)) * aa3) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) -(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * (-((b3 * (-u11 * v21 + u21 * v11) * aa3 ^ 3 - (b1 * v21 - b2 * u21) * (aa1 * u11 + aa2 * v11) * aa3 ^ 2 + (b3 * u21 * aa1 + v21 * b3 * aa2 + b1 * v21 - b2 * u21) * (aa1 * v11 - aa2 * u11) * aa3 - b3 * (aa1 ^ 2 + aa2 ^ 2) * (u11 * u21 + v11 * v21)) * f ^ 2 + ((-v11 * b1 + b2 * u11) * aa3 ^ 3 + b3 * (aa1 * v21 - aa2 * u21) * aa3 ^ 2 + ((-b2 * u21 - b1 * (v11 - v21)) * aa1 ^ 2 + ((b1 * u11 - v11 * b2) * aa2 - b3 * u21) * aa1 + ((b1 * v21 + b2 * u11 - b2 * u21) * aa2 - v21 * b3) * aa2) * aa3 + (aa1 ^ 2 + aa2 ^ 2) * (b1 * u11 + v11 * b2)) * f + aa3 * (aa3 * (-aa1 * b2 + aa2 * b1) + aa1 * b1 + aa2 * b2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((b3 * (u11 * u21 + v11 * v21) * aa3 ^ 4 + (b1 * v21 - b2 * u21) * (aa1 * v11 - aa2 * u11) * aa3 ^ 3 + (b3 * (u11 * u21 + v11 * v21) * aa1 ^ 2 + u11 * (b1 * v21 - b2 * u21) * aa1 + (b3 * (u11 * u21 + v11 * v21) * aa2 + v11 * (b1 * v21 - b2 * u21)) * aa2) * aa3 ^ 2 + (v11 * (b1 * v21 - b2 * u21) * aa1 ^ 3 - ((b1 * v21 - b2 * u21) * aa2 + 0.2e1 * v21 * b3) * u11 * aa1 ^ 2 + (v11 * (b1 * v21 - b2 * u21) * aa2 - 0.2e1 * b3 * (-u11 * u21 + v11 * v21)) * aa2 * aa1 + 0.2e1 * (-u11 * (b1 * v21 - b2 * u21) * aa2 / 0.2e1 + b3 * u21 * v11) * aa2 ^ 2) * aa3 - (aa1 ^ 2 + aa2 ^ 2) * (b1 * v21 - b2 * u21) * (aa1 * u11 + aa2 * v11)) * f ^ 2 + ((-b1 * u11 - v11 * b2) * aa3 ^ 4 - b3 * (aa1 * u21 + aa2 * v21) * aa3 ^ 3 + ((-b1 * u11 - v11 * b2) * aa1 ^ 2 - v21 * b3 * aa1 + (-b1 * u11 - v11 * b2) * aa2 ^ 2 + b3 * u21 * aa2) * aa3 ^ 2 + (-aa1 ^ 3 * b3 * u21 + (-v21 * b3 * aa2 - 0.2e1 * b1 * v21 + 0.2e1 * b2 * u11 + 0.2e1 * b2 * u21) * aa1 ^ 2 + 0.2e1 * (-b3 * u21 * aa2 / 0.2e1 + v11 * b2 - b1 * u11) * aa2 * aa1 - 0.2e1 * (v21 * b3 * aa2 / 0.2e1 - b2 * u21 + b1 * (v11 + v21)) * aa2 ^ 2) * aa3 + b3 * (aa1 ^ 2 + aa2 ^ 2) * (aa1 * v21 - aa2 * u21)) * f + (aa1 * b1 + aa2 * b2) * aa3 ^ 3 + (aa1 * b2 - aa2 * b1) * aa3 ^ 2 + (aa1 ^ 2 + aa2 ^ 2) * (aa1 * b1 + aa2 * b2) * aa3 + (aa1 ^ 2 + aa2 ^ 2) * (-aa1 * b2 + aa2 * b1)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (aa1 * u11 + aa2 * v11) * ((-b1 * v21 + b2 * u21) * aa3 ^ 2 + 0.2e1 * b3 * (aa1 * v21 - aa2 * u21) * aa3 + (aa1 ^ 2 + aa2 ^ 2) * (b1 * v21 - b2 * u21)) * f ^ 2 + (b3 * (aa1 * v21 - aa2 * u21) * aa3 ^ 2 + ((0.2e1 * b1 * v21 - 0.2e1 * b2 * u11 - 0.2e1 * b2 * u21) * aa1 ^ 2 - 0.2e1 * aa2 * (-b1 * u11 + v11 * b2) * aa1 + 0.2e1 * aa2 ^ 2 * (-b2 * u21 + b1 * (v11 + v21))) * aa3 - b3 * (aa1 ^ 2 + aa2 ^ 2) * (aa1 * v21 - aa2 * u21)) * f - (aa1 ^ 2 + aa2 ^ 2 - aa3 ^ 2) * (-aa1 * b2 + aa2 * b1)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) 0.2e1 * (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((v11 * (b1 * v21 - b2 * u21) * f - b3 * u21 / 0.2e1) * aa1 + (-u11 * (b1 * v21 - b2 * u21) * f - v21 * b3 / 0.2e1) * aa2 + aa3 * (b3 * (u11 * u21 + v11 * v21) * f - v11 * b2 / 0.2e1 - b1 * u11 / 0.2e1)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((-b3 * f * u21 * v11 + b2 * u21 / 0.2e1 + b1 * (v11 - v21) / 0.2e1) * aa1 ^ 2 + ((-b3 * (-u11 * u21 + v11 * v21) * f - b1 * u11 / 0.2e1 + v11 * b2 / 0.2e1) * aa2 + (u11 * (b1 * v21 - b2 * u21) * f - v21 * b3 / 0.2e1) * aa3) * aa1 + (b3 * f * u11 * v21 - b1 * v21 / 0.2e1 - b2 * u11 / 0.2e1 + b2 * u21 / 0.2e1) * aa2 ^ 2 + aa3 * (v11 * (b1 * v21 - b2 * u21) * f + b3 * u21 / 0.2e1) * aa2 - (b3 * (-u11 * v21 + u21 * v11) * f - v11 * b1 / 0.2e1 + b2 * u11 / 0.2e1) * aa3 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + u11 * (v21 * b3 * f - b2 / 0.2e1) * aa1 ^ 2 + ((b3 * (-u11 * u21 + v11 * v21) * f + b1 * u11 / 0.2e1 - v11 * b2 / 0.2e1) * aa2 - (u11 * (b1 * v21 - b2 * u21) * f - v21 * b3 / 0.2e1) * aa3) * aa1 - v11 * (b3 * u21 * f - b1 / 0.2e1) * aa2 ^ 2 - aa3 * (v11 * (b1 * v21 - b2 * u21) * f + b3 * u21 / 0.2e1) * aa2 - aa3 ^ 2 * (b1 * v21 - b2 * u21) / 0.2e1) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1); (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) * (-(v22 * (aa1 * v12 - aa2 * u12) * f ^ 2 - aa3 * u12 * f + aa1) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((aa3 * v22 * (aa1 * u12 + aa2 * v12) * f ^ 2 + ((v12 - v22) * aa1 ^ 2 - u12 * aa2 * aa1 - v22 * aa2 ^ 2 + aa3 ^ 2 * v12) * f - aa3 * aa2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (aa3 * f * v22 - aa2) * ((aa1 * u12 + aa2 * v12) * f + aa3)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) -(-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (u22 * (aa1 * v12 - aa2 * u12) * f ^ 2 + aa3 * v12 * f - aa2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((aa3 * u22 * (aa1 * u12 + aa2 * v12) * f ^ 2 + (-u22 * aa1 ^ 2 - v12 * aa2 * aa1 + (u12 - u22) * aa2 ^ 2 + aa3 ^ 2 * u12) * f - aa3 * aa1) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (aa3 * f * u22 - aa1) * ((aa1 * u12 + aa2 * v12) * f + aa3)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) -f * ((aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (aa3 * (u12 * u22 + v12 * v22) * f - aa1 * u22 - aa2 * v22) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((v12 * u22 * aa1 ^ 2 - aa2 * (u12 * u22 - v12 * v22) * aa1 - v22 * u12 * aa2 ^ 2 - aa3 ^ 2 * (v22 * u12 - v12 * u22)) * f + aa3 * (aa1 * v22 - aa2 * u22)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (aa1 * v22 - aa2 * u22) * ((aa1 * u12 + aa2 * v12) * f + aa3))) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) -(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * ((aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((-b3 * u22 * v12 * aa1 ^ 3 + (-b3 * (-u12 * u22 + v12 * v22) * aa2 + aa3 * u12 * (b1 * v22 - b2 * u22)) * aa1 ^ 2 + (v22 * b3 * u12 * aa2 ^ 2 + (b1 * v22 - b2 * u22) * (aa3 * v12 + u12) * aa2 - aa3 * b3 * ((-v22 * u12 + v12 * u22) * aa3 + v12 * v22 + u12 * u22)) * aa1 + v12 * (aa2 ^ 2 + aa3 ^ 2) * (b1 * v22 - b2 * u22)) * f ^ 2 + ((v12 * b1 - b1 * v22 + b2 * u22) * aa1 ^ 3 + ((-b1 * u12 + v12 * b2) * aa2 - v22 * b3 * aa3) * aa1 ^ 2 + ((-b1 * v22 - b2 * u12 + b2 * u22) * aa2 ^ 2 + b3 * (aa3 * u22 + v22) * aa2 + aa3 * (aa3 * (v12 * b1 - b2 * u12) + v12 * b2 + b1 * u12)) * aa1 - b3 * u22 * (aa2 ^ 2 + aa3 ^ 2)) * f + b2 * aa1 ^ 2 * aa3 - aa2 * (aa3 * b1 + b2) * aa1 + b1 * (aa2 ^ 2 + aa3 ^ 2)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((v12 * (b1 * v22 - b2 * u22) * aa1 ^ 4 + (-u12 * (b1 * v22 - b2 * u22) * aa2 + b3 * aa3 * (u12 * u22 + v12 * v22)) * aa1 ^ 3 + (v12 * (b1 * v22 - b2 * u22) * aa2 ^ 2 - b3 * (-u12 * u22 + v12 * v22) * aa2 + aa3 * (b1 * v22 - b2 * u22) * (aa3 * v12 + u12)) * aa1 ^ 2 + (-u12 * (b1 * v22 - b2 * u22) * aa2 ^ 3 + ((u12 * u22 + v12 * v22) * aa3 + 0.2e1 * v12 * u22 + 0.2e1 * v22 * u12) * b3 * aa2 ^ 2 + 0.2e1 * (-aa3 * u12 / 0.2e1 + v12) * aa3 * (b1 * v22 - b2 * u22) * aa2 + ((u12 * u22 + v12 * v22) * aa3 + 0.2e1 * v22 * u12) * aa3 ^ 2 * b3) * aa1 + (b3 * (-u12 * u22 + v12 * v22) * aa2 - aa3 * u12 * (b1 * v22 - b2 * u22)) * (aa2 ^ 2 + aa3 ^ 2)) * f ^ 2 + (-b3 * aa1 ^ 4 * u22 + (-v22 * b3 * aa2 - aa3 * (b1 * u12 + v12 * b2)) * aa1 ^ 3 + (-b3 * aa2 ^ 2 * u22 + (-b1 * u12 + v12 * b2) * aa2 - b3 * aa3 * (aa3 * u22 + v22)) * aa1 ^ 2 + (-v22 * b3 * aa2 ^ 3 + ((-b1 * u12 - v12 * b2) * aa3 - 0.2e1 * v12 * b1 - 0.2e1 * b2 * u12) * aa2 ^ 2 - b3 * aa3 * (aa3 * v22 - 0.2e1 * u22) * aa2 - (aa3 * (b1 * u12 + v12 * b2) - 0.2e1 * b1 * v22 + 0.2e1 * b2 * u12 + 0.2e1 * b2 * u22) * aa3 ^ 2) * aa1 - ((-b1 * u12 + v12 * b2) * aa2 - v22 * b3 * aa3) * (aa2 ^ 2 + aa3 ^ 2)) * f + b1 * aa1 ^ 4 + b2 * aa1 ^ 3 * aa2 + (aa2 ^ 2 * b1 + aa3 * (aa3 * b1 + b2)) * aa1 ^ 2 + (b2 * aa2 ^ 3 + (aa3 ^ 2 * b2 - 0.2e1 * aa3 * b1) * aa2) * aa1 - b2 * aa3 * (aa2 ^ 2 + aa3 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((b3 * (-u12 * u22 + v12 * v22) * aa2 - aa3 * u12 * (b1 * v22 - b2 * u22)) * aa1 ^ 2 + (-0.2e1 * b3 * (v22 * u12 + v12 * u22) * aa2 ^ 2 - 0.2e1 * v12 * aa3 * (b1 * v22 - b2 * u22) * aa2 - 0.2e1 * v22 * b3 * aa3 ^ 2 * u12) * aa1 - (b3 * (-u12 * u22 + v12 * v22) * aa2 - aa3 * u12 * (b1 * v22 - b2 * u22)) * (aa2 ^ 2 + aa3 ^ 2)) * f ^ 2 + (((b1 * u12 - v12 * b2) * aa2 + v22 * b3 * aa3) * aa1 ^ 2 + ((0.2e1 * v12 * b1 + 0.2e1 * b2 * u12) * aa2 ^ 2 - 0.2e1 * b3 * aa3 * u22 * aa2 - 0.2e1 * aa3 ^ 2 * (b1 * v22 - b2 * u12 - b2 * u22)) * aa1 + ((-b1 * u12 + v12 * b2) * aa2 - v22 * b3 * aa3) * (aa2 ^ 2 + aa3 ^ 2)) * f + 0.2e1 * (-aa1 ^ 2 * b2 / 0.2e1 + b1 * aa1 * aa2 + b2 * (aa2 ^ 2 + aa3 ^ 2) / 0.2e1) * aa3) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) -(-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((-v22 * b3 * u12 * aa2 ^ 3 + (b3 * (-u12 * u22 + v12 * v22) * aa1 - v12 * aa3 * (b1 * v22 - b2 * u22)) * aa2 ^ 2 + (v12 * b3 * u22 * aa1 ^ 2 + (b1 * v22 - b2 * u22) * (-aa3 * u12 + v12) * aa1 + aa3 * b3 * ((-v22 * u12 + v12 * u22) * aa3 + v12 * v22 + u12 * u22)) * aa2 + u12 * (aa1 ^ 2 + aa3 ^ 2) * (b1 * v22 - b2 * u22)) * f ^ 2 + ((b1 * v22 + b2 * u12 - b2 * u22) * aa2 ^ 3 + ((b1 * u12 - v12 * b2) * aa1 - b3 * aa3 * u22) * aa2 ^ 2 + ((-v12 * b1 + b1 * v22 - b2 * u22) * aa1 ^ 2 + b3 * (aa3 * v22 - u22) * aa1 - aa3 * (aa3 * (v12 * b1 - b2 * u12) + v12 * b2 + b1 * u12)) * aa2 + v22 * b3 * (aa1 ^ 2 + aa3 ^ 2)) * f + b1 * aa2 ^ 2 * aa3 + aa1 * (-aa3 * b2 + b1) * aa2 - b2 * (aa1 ^ 2 + aa3 ^ 2)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((-u12 * (b1 * v22 - b2 * u22) * aa2 ^ 4 + (v12 * (b1 * v22 - b2 * u22) * aa1 + b3 * aa3 * (u12 * u22 + v12 * v22)) * aa2 ^ 3 + (-u12 * (b1 * v22 - b2 * u22) * aa1 ^ 2 - b3 * (-u12 * u22 + v12 * v22) * aa1 + aa3 * (b1 * v22 - b2 * u22) * (-aa3 * u12 + v12)) * aa2 ^ 2 + (v12 * (b1 * v22 - b2 * u22) * aa1 ^ 3 + ((u12 * u22 + v12 * v22) * aa3 - 0.2e1 * v12 * u22 - 0.2e1 * v22 * u12) * b3 * aa1 ^ 2 + aa3 * (b1 * v22 - b2 * u22) * (aa3 * v12 + 0.2e1 * u12) * aa1 + aa3 ^ 2 * b3 * ((u12 * u22 + v12 * v22) * aa3 - 0.2e1 * v12 * u22)) * aa2 - (-b3 * (-u12 * u22 + v12 * v22) * aa1 + v12 * aa3 * (b1 * v22 - b2 * u22)) * (aa1 ^ 2 + aa3 ^ 2)) * f ^ 2 + (-v22 * b3 * aa2 ^ 4 + (-b3 * u22 * aa1 - aa3 * (b1 * u12 + v12 * b2)) * aa2 ^ 3 + (-b3 * aa1 ^ 2 * v22 + (-b1 * u12 + v12 * b2) * aa1 - b3 * aa3 * (aa3 * v22 - u22)) * aa2 ^ 2 + (-aa1 ^ 3 * b3 * u22 + ((-b1 * u12 - v12 * b2) * aa3 + 0.2e1 * v12 * b1 + 0.2e1 * b2 * u12) * aa1 ^ 2 - 0.2e1 * aa3 * b3 * (aa3 * u22 / 0.2e1 + v22) * aa1 + 0.2e1 * aa3 ^ 2 * ((-v12 * b2 / 0.2e1 - b1 * u12 / 0.2e1) * aa3 + v12 * b1 + b1 * v22 - b2 * u22)) * aa2 - ((-b1 * u12 + v12 * b2) * aa1 + b3 * aa3 * u22) * (aa1 ^ 2 + aa3 ^ 2)) * f + b2 * aa2 ^ 4 + b1 * aa1 * aa2 ^ 3 + (aa1 ^ 2 * b2 + aa3 ^ 2 * b2 - aa3 * b1) * aa2 ^ 2 + aa1 * (b1 * aa1 ^ 2 + aa3 * (aa3 * b1 + 0.2e1 * b2)) * aa2 + aa3 * b1 * (aa1 ^ 2 + aa3 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((b3 * (-u12 * u22 + v12 * v22) * aa1 - v12 * aa3 * (b1 * v22 - b2 * u22)) * aa2 ^ 2 + (0.2e1 * b3 * (v22 * u12 + v12 * u22) * aa1 ^ 2 - 0.2e1 * aa3 * u12 * (b1 * v22 - b2 * u22) * aa1 + 0.2e1 * v12 * b3 * aa3 ^ 2 * u22) * aa2 + (-b3 * (-u12 * u22 + v12 * v22) * aa1 + v12 * aa3 * (b1 * v22 - b2 * u22)) * (aa1 ^ 2 + aa3 ^ 2)) * f ^ 2 + (((b1 * u12 - v12 * b2) * aa1 - b3 * aa3 * u22) * aa2 ^ 2 + ((-0.2e1 * v12 * b1 - 0.2e1 * b2 * u12) * aa1 ^ 2 + 0.2e1 * v22 * b3 * aa1 * aa3 - 0.2e1 * aa3 ^ 2 * (v12 * b1 + b1 * v22 - b2 * u22)) * aa2 + ((-b1 * u12 + v12 * b2) * aa1 + b3 * aa3 * u22) * (aa1 ^ 2 + aa3 ^ 2)) * f - (-aa2 ^ 2 * b1 + 0.2e1 * aa1 * aa2 * b2 + b1 * (aa1 ^ 2 + aa3 ^ 2)) * aa3) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) -(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * (-((b3 * (-v22 * u12 + v12 * u22) * aa3 ^ 3 - (b1 * v22 - b2 * u22) * (aa1 * u12 + aa2 * v12) * aa3 ^ 2 + (b3 * u22 * aa1 + v22 * b3 * aa2 + b1 * v22 - b2 * u22) * (aa1 * v12 - aa2 * u12) * aa3 - b3 * (aa1 ^ 2 + aa2 ^ 2) * (u12 * u22 + v12 * v22)) * f ^ 2 + ((-v12 * b1 + b2 * u12) * aa3 ^ 3 + b3 * (aa1 * v22 - aa2 * u22) * aa3 ^ 2 + ((-b2 * u22 - b1 * (v12 - v22)) * aa1 ^ 2 + ((b1 * u12 - v12 * b2) * aa2 - b3 * u22) * aa1 + ((b1 * v22 + b2 * u12 - b2 * u22) * aa2 - v22 * b3) * aa2) * aa3 + (aa1 ^ 2 + aa2 ^ 2) * (b1 * u12 + v12 * b2)) * f + aa3 * (aa3 * (-aa1 * b2 + aa2 * b1) + aa1 * b1 + aa2 * b2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((b3 * (u12 * u22 + v12 * v22) * aa3 ^ 4 + (b1 * v22 - b2 * u22) * (aa1 * v12 - aa2 * u12) * aa3 ^ 3 + (b3 * (u12 * u22 + v12 * v22) * aa1 ^ 2 + u12 * (b1 * v22 - b2 * u22) * aa1 + (b3 * (u12 * u22 + v12 * v22) * aa2 + v12 * (b1 * v22 - b2 * u22)) * aa2) * aa3 ^ 2 + (v12 * (b1 * v22 - b2 * u22) * aa1 ^ 3 - ((b1 * v22 - b2 * u22) * aa2 + 0.2e1 * v22 * b3) * u12 * aa1 ^ 2 + (v12 * (b1 * v22 - b2 * u22) * aa2 - 0.2e1 * b3 * (-u12 * u22 + v12 * v22)) * aa2 * aa1 + 0.2e1 * (-u12 * (b1 * v22 - b2 * u22) * aa2 / 0.2e1 + b3 * u22 * v12) * aa2 ^ 2) * aa3 - (aa1 ^ 2 + aa2 ^ 2) * (b1 * v22 - b2 * u22) * (aa1 * u12 + aa2 * v12)) * f ^ 2 + ((-b1 * u12 - v12 * b2) * aa3 ^ 4 - b3 * (aa1 * u22 + aa2 * v22) * aa3 ^ 3 + ((-b1 * u12 - v12 * b2) * aa1 ^ 2 - v22 * b3 * aa1 + (-b1 * u12 - v12 * b2) * aa2 ^ 2 + b3 * u22 * aa2) * aa3 ^ 2 + (-aa1 ^ 3 * b3 * u22 + (-v22 * b3 * aa2 - 0.2e1 * b1 * v22 + 0.2e1 * b2 * u12 + 0.2e1 * b2 * u22) * aa1 ^ 2 + 0.2e1 * (-b3 * u22 * aa2 / 0.2e1 + v12 * b2 - b1 * u12) * aa2 * aa1 - 0.2e1 * (v22 * b3 * aa2 / 0.2e1 - b2 * u22 + b1 * (v12 + v22)) * aa2 ^ 2) * aa3 + b3 * (aa1 ^ 2 + aa2 ^ 2) * (aa1 * v22 - aa2 * u22)) * f + (aa1 * b1 + aa2 * b2) * aa3 ^ 3 + (aa1 * b2 - aa2 * b1) * aa3 ^ 2 + (aa1 ^ 2 + aa2 ^ 2) * (aa1 * b1 + aa2 * b2) * aa3 + (aa1 ^ 2 + aa2 ^ 2) * (-aa1 * b2 + aa2 * b1)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (aa1 * u12 + aa2 * v12) * ((-b1 * v22 + b2 * u22) * aa3 ^ 2 + 0.2e1 * b3 * (aa1 * v22 - aa2 * u22) * aa3 + (aa1 ^ 2 + aa2 ^ 2) * (b1 * v22 - b2 * u22)) * f ^ 2 + (b3 * (aa1 * v22 - aa2 * u22) * aa3 ^ 2 + ((0.2e1 * b1 * v22 - 0.2e1 * b2 * u12 - 0.2e1 * b2 * u22) * aa1 ^ 2 - 0.2e1 * aa2 * (-b1 * u12 + v12 * b2) * aa1 + 0.2e1 * aa2 ^ 2 * (-b2 * u22 + b1 * (v12 + v22))) * aa3 - b3 * (aa1 ^ 2 + aa2 ^ 2) * (aa1 * v22 - aa2 * u22)) * f - (aa1 ^ 2 + aa2 ^ 2 - aa3 ^ 2) * (-aa1 * b2 + aa2 * b1)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) 0.2e1 * (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((v12 * (b1 * v22 - b2 * u22) * f - b3 * u22 / 0.2e1) * aa1 + (-u12 * (b1 * v22 - b2 * u22) * f - v22 * b3 / 0.2e1) * aa2 + aa3 * (b3 * (u12 * u22 + v12 * v22) * f - v12 * b2 / 0.2e1 - b1 * u12 / 0.2e1)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((-b3 * f * u22 * v12 + b2 * u22 / 0.2e1 + b1 * (v12 - v22) / 0.2e1) * aa1 ^ 2 + ((-b3 * (-u12 * u22 + v12 * v22) * f - b1 * u12 / 0.2e1 + v12 * b2 / 0.2e1) * aa2 + (u12 * (b1 * v22 - b2 * u22) * f - v22 * b3 / 0.2e1) * aa3) * aa1 + (b3 * f * u12 * v22 - b1 * v22 / 0.2e1 - b2 * u12 / 0.2e1 + b2 * u22 / 0.2e1) * aa2 ^ 2 + aa3 * (v12 * (b1 * v22 - b2 * u22) * f + b3 * u22 / 0.2e1) * aa2 - (b3 * (-v22 * u12 + v12 * u22) * f - v12 * b1 / 0.2e1 + b2 * u12 / 0.2e1) * aa3 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + u12 * (v22 * b3 * f - b2 / 0.2e1) * aa1 ^ 2 + ((b3 * (-u12 * u22 + v12 * v22) * f + b1 * u12 / 0.2e1 - v12 * b2 / 0.2e1) * aa2 - (u12 * (b1 * v22 - b2 * u22) * f - v22 * b3 / 0.2e1) * aa3) * aa1 - v12 * (b3 * u22 * f - b1 / 0.2e1) * aa2 ^ 2 - aa3 * (v12 * (b1 * v22 - b2 * u22) * f + b3 * u22 / 0.2e1) * aa2 - aa3 ^ 2 * (b1 * v22 - b2 * u22) / 0.2e1) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1); (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((aa1 * v11 - aa2 * u11) * a3_1 - aa2 * v21) * f - aa3) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa3 * ((aa1 * u11 + aa2 * v11) * a3_1 + aa1 * v21) * f + (-aa1 ^ 2 - aa2 ^ 2) * a3_1 - aa2 * aa1) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - aa3 * ((aa1 * u11 + aa2 * v11) * a3_1 + aa1 * v21) * f - aa3 ^ 2 * a3_1 + aa2 * aa1)) * f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) -f * (-f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa1 * v11 - aa2 * u11) * a1_1 - aa2 * u21) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((((aa1 * u11 + aa2 * v11) * a1_1 + aa1 * u21) * aa3 * f + (-aa1 ^ 2 - aa2 ^ 2) * a1_1 + aa2 ^ 2 + aa3 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((aa1 * u11 + aa2 * v11) * a1_1 + aa1 * u21) * aa3 * f - aa3 ^ 2 * a1_1 + aa1 ^ 2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) -((aa3 * (u11 * a1_1 + v11 * a3_1 + u21) * f - a3_1 * aa2 - a1_1 * aa1) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((v11 * a1_1 * aa1 ^ 2 + (-u11 * a1_1 + v11 * a3_1 - u21) * aa2 * aa1 + (-a3_1 * u11 - v21) * aa2 ^ 2 - aa3 ^ 2 * (-v11 * a1_1 + a3_1 * u11 + v21)) * f + aa3 * (-a1_1 * aa2 + a3_1 * aa1)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((-a3_1 * u11 - v21) * aa1 ^ 2 - (-u11 * a1_1 + v11 * a3_1 - u21) * aa2 * aa1 + v11 * a1_1 * aa2 ^ 2) * f - aa3 * (-a1_1 * aa2 + a3_1 * aa1))) * f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * ((aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((a1_1 * b3 * f * v11 - a1_1 * b2 + a3_1 * b1) * aa1 ^ 3 + (((a1_1 * b2 * u11 - a3_1 * b1 * u11 - b1 * v21 + b2 * u21) * aa3 + b3 * (-u11 * a1_1 + v11 * a3_1 - u21) * aa2) * f + b3 * aa3 * a3_1 + aa2 * b1) * aa1 ^ 2 + ((b3 * aa3 ^ 2 * (v11 * a1_1 - a3_1 * u11 - v21) + (v11 * (a1_1 * b2 - a3_1 * b1) * aa2 + b3 * (u11 * a1_1 + v11 * a3_1 + u21)) * aa3 - (b3 * (a3_1 * u11 + v21) * aa2 - a1_1 * b2 * u11 + a3_1 * b1 * u11 + b1 * v21 - b2 * u21) * aa2) * f + aa3 ^ 2 * b2 + (-a1_1 * b3 * aa2 - b1) * aa3 - ((-a3_1 * b1 + b2 * (a1_1 - 0.1e1)) * aa2 + a3_1 * b3) * aa2) * aa1 + (v11 * (a1_1 * b2 - a3_1 * b1) * f + a1_1 * b3) * (aa2 ^ 2 + aa3 ^ 2)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((v11 * (a1_1 * b2 - a3_1 * b1) * f + a1_1 * b3) * aa1 ^ 4 + ((-b3 * aa3 * (u11 * a1_1 + v11 * a3_1 + u21) + (-a1_1 * b2 * u11 + a3_1 * b1 * u11 + b1 * v21 - b2 * u21) * aa2) * f + a3_1 * b3 * aa2 + aa3 * b1) * aa1 ^ 3 + ((v11 * (a1_1 * b2 - a3_1 * b1) * aa3 ^ 2 + (a1_1 * b2 * u11 - a3_1 * b1 * u11 - b1 * v21 + b2 * u21) * aa3 + aa2 * (v11 * (a1_1 * b2 - a3_1 * b1) * aa2 + b3 * (-u11 * a1_1 + v11 * a3_1 - u21))) * f + b3 * aa3 ^ 2 * a1_1 + b3 * aa3 * a3_1 + aa2 * (a1_1 * b3 * aa2 + b1)) * aa1 ^ 2 + ((-b3 * (u11 * a1_1 + v11 * a3_1 + u21) * aa3 ^ 3 + ((-a1_1 * b2 * u11 + a3_1 * b1 * u11 + b1 * v21 - b2 * u21) * aa2 - 0.2e1 * b3 * (a3_1 * u11 + v21)) * aa3 ^ 2 + 0.2e1 * (-b3 * (u11 * a1_1 + v11 * a3_1 + u21) * aa2 / 0.2e1 + v11 * (a1_1 * b2 - a3_1 * b1)) * aa2 * aa3 - 0.2e1 * aa2 ^ 2 * ((a1_1 * b2 * u11 / 0.2e1 - a3_1 * b1 * u11 / 0.2e1 - b1 * v21 / 0.2e1 + b2 * u21 / 0.2e1) * aa2 + b3 * (v11 * a1_1 + a3_1 * u11 + v21))) * f + b1 * aa3 ^ 3 + (a3_1 * b3 * aa2 - 0.2e1 * a3_1 * b1 + 0.2e1 * b2 * (a1_1 + 0.1e1)) * aa3 ^ 2 + (-0.2e1 * a1_1 * b3 * aa2 + aa2 ^ 2 * b1) * aa3 + aa2 ^ 2 * (a3_1 * b3 * aa2 + 0.2e1 * b2)) * aa1 - (((a1_1 * b2 * u11 - a3_1 * b1 * u11 - b1 * v21 + b2 * u21) * aa3 + b3 * (-u11 * a1_1 + v11 * a3_1 - u21) * aa2) * f + b3 * aa3 * a3_1 + aa2 * b1) * (aa2 ^ 2 + aa3 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((-b3 * (-u11 * a1_1 + v11 * a3_1 - u21) * aa2 + aa3 * (-a1_1 * b2 * u11 + a3_1 * b1 * u11 + b1 * v21 - b2 * u21)) * f - b3 * aa3 * a3_1 - aa2 * b1) * aa1 ^ 2 + ((0.2e1 * b3 * (a3_1 * u11 + v21) * aa3 ^ 2 - 0.2e1 * v11 * aa3 * (a1_1 * b2 - a3_1 * b1) * aa2 + 0.2e1 * b3 * aa2 ^ 2 * (v11 * a1_1 + a3_1 * u11 + v21)) * f + (0.2e1 * a3_1 * b1 - 0.2e1 * b2 * (a1_1 + 0.1e1)) * aa3 ^ 2 + 0.2e1 * a1_1 * aa2 * aa3 * b3 - 0.2e1 * b2 * aa2 ^ 2) * aa1 + (((a1_1 * b2 * u11 - a3_1 * b1 * u11 - b1 * v21 + b2 * u21) * aa3 + b3 * (-u11 * a1_1 + v11 * a3_1 - u21) * aa2) * f + b3 * aa3 * a3_1 + aa2 * b1) * (aa2 ^ 2 + aa3 ^ 2)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * (-((b3 * (a3_1 * u11 + v21) * f + a1_1 * b2 - a3_1 * b1 - b2) * aa2 ^ 3 + ((-b3 * (-u11 * a1_1 + v11 * a3_1 - u21) * aa1 - v11 * aa3 * (a1_1 * b2 - a3_1 * b1)) * f + b3 * aa3 * a1_1 - aa1 * b1) * aa2 ^ 2 + ((-v11 * a1_1 * b3 * aa1 ^ 2 + (aa3 * (-a1_1 * b2 * u11 + a3_1 * b1 * u11 + b1 * v21 - b2 * u21) + v11 * (a1_1 * b2 - a3_1 * b1)) * aa1 - ((v11 * a1_1 - a3_1 * u11 - v21) * aa3 + v11 * a3_1 + u11 * a1_1 + u21) * aa3 * b3) * f + aa1 ^ 2 * (a1_1 * b2 - a3_1 * b1) + b3 * (-a3_1 * aa3 + a1_1) * aa1 + aa3 * (-aa3 * b2 + b1)) * aa2 - (aa1 ^ 2 + aa3 ^ 2) * ((-a1_1 * b2 * u11 + a3_1 * b1 * u11 + b1 * v21 - b2 * u21) * f + a3_1 * b3)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((((-a1_1 * b2 * u11 + a3_1 * b1 * u11 + b1 * v21 - b2 * u21) * f + a3_1 * b3) * aa2 ^ 4 + ((v11 * (a1_1 * b2 - a3_1 * b1) * aa1 - b3 * aa3 * (u11 * a1_1 + v11 * a3_1 + u21)) * f + a1_1 * b3 * aa1 + aa3 * b1) * aa2 ^ 3 + (((-a1_1 * b2 * u11 + a3_1 * b1 * u11 + b1 * v21 - b2 * u21) * aa1 ^ 2 + b3 * (-u11 * a1_1 + v11 * a3_1 - u21) * aa1 + aa3 * (aa3 * (-a1_1 * b2 * u11 + a3_1 * b1 * u11 + b1 * v21 - b2 * u21) + v11 * (a1_1 * b2 - a3_1 * b1))) * f + b3 * a3_1 * aa1 ^ 2 + aa1 * b1 - b3 * aa3 * (-a3_1 * aa3 + a1_1)) * aa2 ^ 2 + ((v11 * (a1_1 * b2 - a3_1 * b1) * aa1 ^ 3 + 0.2e1 * ((-v11 * a3_1 / 0.2e1 - u11 * a1_1 / 0.2e1 - u21 / 0.2e1) * aa3 + v11 * a1_1 + a3_1 * u11 + v21) * b3 * aa1 ^ 2 + aa3 * (v11 * aa3 * (a1_1 * b2 - a3_1 * b1) + 0.2e1 * a1_1 * b2 * u11 - 0.2e1 * a3_1 * b1 * u11 - 0.2e1 * b1 * v21 + 0.2e1 * b2 * u21) * aa1 + 0.2e1 * ((-v11 * a3_1 / 0.2e1 - u11 * a1_1 / 0.2e1 - u21 / 0.2e1) * aa3 + v11 * a1_1) * aa3 ^ 2 * b3) * f + a1_1 * aa1 ^ 3 * b3 + (aa3 * b1 - 0.2e1 * b2) * aa1 ^ 2 + b3 * aa3 * (a1_1 * aa3 + 0.2e1 * a3_1) * aa1 + 0.2e1 * aa3 ^ 2 * (a1_1 * b2 - a3_1 * b1 + aa3 * b1 / 0.2e1)) * aa2 - (aa1 ^ 2 + aa3 ^ 2) * ((b3 * (-u11 * a1_1 + v11 * a3_1 - u21) * aa1 + v11 * aa3 * (a1_1 * b2 - a3_1 * b1)) * f - b3 * aa3 * a1_1 + aa1 * b1)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((-b3 * (-u11 * a1_1 + v11 * a3_1 - u21) * aa1 - v11 * aa3 * (a1_1 * b2 - a3_1 * b1)) * f + b3 * aa3 * a1_1 - aa1 * b1) * aa2 ^ 2 + ((-0.2e1 * b3 * (v11 * a1_1 + a3_1 * u11 + v21) * aa1 ^ 2 + 0.2e1 * (-a1_1 * b2 * u11 + a3_1 * b1 * u11 + b1 * v21 - b2 * u21) * aa3 * aa1 - 0.2e1 * v11 * a1_1 * b3 * aa3 ^ 2) * f + 0.2e1 * aa1 ^ 2 * b2 - 0.2e1 * a3_1 * aa1 * aa3 * b3 - 0.2e1 * aa3 ^ 2 * (a1_1 * b2 - a3_1 * b1)) * aa2 + (aa1 ^ 2 + aa3 ^ 2) * ((b3 * (-u11 * a1_1 + v11 * a3_1 - u21) * aa1 + v11 * aa3 * (a1_1 * b2 - a3_1 * b1)) * f - b3 * aa3 * a1_1 + aa1 * b1))) f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * (-((-b3 * (v11 * a1_1 - a3_1 * u11 - v21) * f - b2) * aa3 ^ 3 + (((-a1_1 * b2 * u11 + a3_1 * b1 * u11 + b1 * v21 - b2 * u21) * aa1 - v11 * (a1_1 * b2 - a3_1 * b1) * aa2) * f + b3 * (a1_1 * aa2 - a3_1 * aa1)) * aa3 ^ 2 + ((-v11 * a1_1 * b3 * aa1 ^ 2 + (-b3 * (-u11 * a1_1 + v11 * a3_1 - u21) * aa2 + v11 * (a1_1 * b2 - a3_1 * b1)) * aa1 + (b3 * (a3_1 * u11 + v21) * aa2 - a1_1 * b2 * u11 + a3_1 * b1 * u11 + b1 * v21 - b2 * u21) * aa2) * f + aa1 ^ 2 * (a1_1 * b2 - a3_1 * b1) + (a1_1 * b3 - aa2 * b1) * aa1 + ((a1_1 * b2 - a3_1 * b1 - b2) * aa2 + a3_1 * b3) * aa2) * aa3 + (b3 * (u11 * a1_1 + v11 * a3_1 + u21) * f - b1) * (aa1 ^ 2 + aa2 ^ 2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((-b3 * (u11 * a1_1 + v11 * a3_1 + u21) * f + b1) * aa3 ^ 4 + ((v11 * (a1_1 * b2 - a3_1 * b1) * aa1 + (-a1_1 * b2 * u11 + a3_1 * b1 * u11 + b1 * v21 - b2 * u21) * aa2) * f + b3 * (a1_1 * aa1 + a3_1 * aa2)) * aa3 ^ 3 + ((-b3 * (u11 * a1_1 + v11 * a3_1 + u21) * aa1 ^ 2 + (a1_1 * b2 * u11 - a3_1 * b1 * u11 - b1 * v21 + b2 * u21) * aa1 + (-b3 * (u11 * a1_1 + v11 * a3_1 + u21) * aa2 + v11 * (a1_1 * b2 - a3_1 * b1)) * aa2) * f - a1_1 * b3 * aa2 + a3_1 * b3 * aa1 + b1 * aa1 ^ 2 + aa2 ^ 2 * b1) * aa3 ^ 2 + ((v11 * (a1_1 * b2 - a3_1 * b1) * aa1 ^ 3 + ((-a1_1 * b2 * u11 + a3_1 * b1 * u11 + b1 * v21 - b2 * u21) * aa2 + 0.2e1 * b3 * (a3_1 * u11 + v21)) * aa1 ^ 2 + (v11 * (a1_1 * b2 - a3_1 * b1) * aa2 + 0.2e1 * b3 * (-u11 * a1_1 + v11 * a3_1 - u21)) * aa2 * aa1 + (-a1_1 * b2 * u11 + a3_1 * b1 * u11 + b1 * v21 - b2 * u21) * aa2 ^ 3 - 0.2e1 * a1_1 * aa2 ^ 2 * b3 * v11) * f + a1_1 * aa1 ^ 3 * b3 + (a3_1 * b3 * aa2 - 0.2e1 * a1_1 * b2 + 0.2e1 * a3_1 * b1 - 0.2e1 * b2) * aa1 ^ 2 + aa2 * (a1_1 * b3 * aa2 + 0.2e1 * b1) * aa1 - 0.2e1 * (-a3_1 * b3 * aa2 / 0.2e1 + a1_1 * b2 - a3_1 * b1) * aa2 ^ 2) * aa3 - (((a1_1 * b2 * u11 - a3_1 * b1 * u11 - b1 * v21 + b2 * u21) * aa1 + v11 * (a1_1 * b2 - a3_1 * b1) * aa2) * f - b3 * (a1_1 * aa2 - a3_1 * aa1)) * (aa1 ^ 2 + aa2 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((-a1_1 * b2 * u11 + a3_1 * b1 * u11 + b1 * v21 - b2 * u21) * aa1 - v11 * (a1_1 * b2 - a3_1 * b1) * aa2) * f + b3 * (a1_1 * aa2 - a3_1 * aa1)) * aa3 ^ 2 + (0.2e1 * ((-a3_1 * u11 - v21) * aa1 ^ 2 - (-u11 * a1_1 + v11 * a3_1 - u21) * aa2 * aa1 + v11 * a1_1 * aa2 ^ 2) * b3 * f + (0.2e1 * a1_1 * b2 - 0.2e1 * a3_1 * b1 + 0.2e1 * b2) * aa1 ^ 2 - 0.2e1 * b1 * aa1 * aa2 + 0.2e1 * (a1_1 * b2 - a3_1 * b1) * aa2 ^ 2) * aa3 + (((a1_1 * b2 * u11 - a3_1 * b1 * u11 - b1 * v21 + b2 * u21) * aa1 + v11 * (a1_1 * b2 - a3_1 * b1) * aa2) * f - b3 * (a1_1 * aa2 - a3_1 * aa1)) * (aa1 ^ 2 + aa2 ^ 2))) -0.2e1 * (-((v11 * (a1_1 * b2 - a3_1 * b1) * aa1 + (-a1_1 * b2 * u11 + a3_1 * b1 * u11 + b1 * v21 - b2 * u21) * aa2 - b3 * aa3 * (u11 * a1_1 + v11 * a3_1 + u21)) * f + a1_1 * b3 * aa1 / 0.2e1 + a3_1 * b3 * aa2 / 0.2e1 + aa3 * b1 / 0.2e1) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((v11 * a1_1 * b3 * aa1 ^ 2 + (b3 * (-u11 * a1_1 + v11 * a3_1 - u21) * aa2 - aa3 * (-a1_1 * b2 * u11 + a3_1 * b1 * u11 + b1 * v21 - b2 * u21)) * aa1 - b3 * (a3_1 * u11 + v21) * aa2 ^ 2 + v11 * aa3 * (a1_1 * b2 - a3_1 * b1) * aa2 + b3 * aa3 ^ 2 * (v11 * a1_1 - a3_1 * u11 - v21)) * f + (-a1_1 * b2 / 0.2e1 + a3_1 * b1 / 0.2e1) * aa1 ^ 2 + (aa2 * b1 / 0.2e1 + b3 * aa3 * a3_1 / 0.2e1) * aa1 + (b2 / 0.2e1 - a1_1 * b2 / 0.2e1 + a3_1 * b1 / 0.2e1) * aa2 ^ 2 - a1_1 * aa2 * aa3 * b3 / 0.2e1 + aa3 ^ 2 * b2 / 0.2e1) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (-b3 * (a3_1 * u11 + v21) * aa1 ^ 2 + (-b3 * (-u11 * a1_1 + v11 * a3_1 - u21) * aa2 + aa3 * (-a1_1 * b2 * u11 + a3_1 * b1 * u11 + b1 * v21 - b2 * u21)) * aa1 - v11 * (-a1_1 * b3 * aa2 + aa3 * (a1_1 * b2 - a3_1 * b1)) * aa2) * f + aa1 ^ 2 * b2 / 0.2e1 + (-b3 * aa3 * a3_1 / 0.2e1 - aa2 * b1 / 0.2e1) * aa1 - aa3 * (-a1_1 * b3 * aa2 + aa3 * (a1_1 * b2 - a3_1 * b1)) / 0.2e1)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1); (-f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa1 * v11 - aa2 * u11) * a4_1 + aa1 * v21) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((((aa1 * u11 + aa2 * v11) * a4_1 + aa2 * v21) * aa3 * f + (-aa1 ^ 2 - aa2 ^ 2) * a4_1 + aa1 ^ 2 + aa3 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((aa1 * u11 + aa2 * v11) * a4_1 + aa2 * v21) * aa3 * f - aa3 ^ 2 * a4_1 + aa2 ^ 2)) * f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) -f * (-(((aa1 * v11 - aa2 * u11) * a2_1 + aa1 * u21) * f + aa3) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((((aa1 * u11 + aa2 * v11) * a2_1 + aa2 * u21) * aa3 * f + (-aa1 ^ 2 - aa2 ^ 2) * a2_1 - aa2 * aa1) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((aa1 * u11 + aa2 * v11) * a2_1 + aa2 * u21) * aa3 * f - aa3 ^ 2 * a2_1 + aa2 * aa1)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) -f * ((aa3 * (a2_1 * u11 + a4_1 * v11 + v21) * f - a4_1 * aa2 - a2_1 * aa1) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((((a2_1 * v11 + u21) * aa1 ^ 2 + (-a2_1 * u11 + a4_1 * v11 + v21) * aa2 * aa1 - a4_1 * u11 * aa2 ^ 2 - aa3 ^ 2 * (-a2_1 * v11 + a4_1 * u11 - u21)) * f + aa3 * (-a2_1 * aa2 + a4_1 * aa1)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (-a4_1 * u11 * aa1 ^ 2 - (-a2_1 * u11 + a4_1 * v11 + v21) * aa2 * aa1 + (a2_1 * v11 + u21) * aa2 ^ 2) * f - aa3 * (-a2_1 * aa2 + a4_1 * aa1)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * ((aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((b3 * (a2_1 * v11 + u21) * f - a2_1 * b2 + a4_1 * b1 - b1) * aa1 ^ 3 + ((b3 * (-a2_1 * u11 + a4_1 * v11 + v21) * aa2 + aa3 * u11 * (a2_1 * b2 - a4_1 * b1)) * f + b3 * aa3 * a4_1 - aa2 * b2) * aa1 ^ 2 + ((-a4_1 * b3 * u11 * aa2 ^ 2 + (aa3 * (a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) + u11 * (a2_1 * b2 - a4_1 * b1)) * aa2 + aa3 * b3 * ((a2_1 * v11 - a4_1 * u11 + u21) * aa3 + a4_1 * v11 + a2_1 * u11 + v21)) * f + (-a2_1 * b2 + a4_1 * b1) * aa2 ^ 2 - b3 * (a2_1 * aa3 + a4_1) * aa2 - aa3 ^ 2 * b1 - aa3 * b2) * aa1 + ((a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) * f + a2_1 * b3) * (aa2 ^ 2 + aa3 ^ 2)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((((a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) * f + a2_1 * b3) * aa1 ^ 4 + ((-u11 * (a2_1 * b2 - a4_1 * b1) * aa2 - b3 * aa3 * (a2_1 * u11 + a4_1 * v11 + v21)) * f + a4_1 * b3 * aa2 + aa3 * b2) * aa1 ^ 3 + (((a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) * aa2 ^ 2 + b3 * (-a2_1 * u11 + a4_1 * v11 + v21) * aa2 + aa3 * (aa3 * (a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) + u11 * (a2_1 * b2 - a4_1 * b1))) * f + a2_1 * b3 * aa2 ^ 2 - aa2 * b2 + b3 * aa3 * (a2_1 * aa3 + a4_1)) * aa1 ^ 2 + ((-u11 * (a2_1 * b2 - a4_1 * b1) * aa2 ^ 3 - 0.2e1 * ((a4_1 * v11 / 0.2e1 + a2_1 * u11 / 0.2e1 + v21 / 0.2e1) * aa3 + a2_1 * v11 + a4_1 * u11 + u21) * b3 * aa2 ^ 2 + 0.2e1 * aa3 * (-aa3 * u11 * (a2_1 * b2 - a4_1 * b1) / 0.2e1 + a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) * aa2 - ((a2_1 * u11 + a4_1 * v11 + v21) * aa3 + 0.2e1 * a4_1 * u11) * aa3 ^ 2 * b3) * f + a4_1 * aa2 ^ 3 * b3 + (aa3 * b2 + 0.2e1 * b1) * aa2 ^ 2 - 0.2e1 * (-a4_1 * aa3 / 0.2e1 + a2_1) * aa3 * b3 * aa2 + 0.2e1 * aa3 ^ 2 * (a2_1 * b2 - a4_1 * b1 + aa3 * b2 / 0.2e1)) * aa1 - ((b3 * (-a2_1 * u11 + a4_1 * v11 + v21) * aa2 + aa3 * u11 * (a2_1 * b2 - a4_1 * b1)) * f + b3 * aa3 * a4_1 - aa2 * b2) * (aa2 ^ 2 + aa3 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((-b3 * (-a2_1 * u11 + a4_1 * v11 + v21) * aa2 - aa3 * u11 * (a2_1 * b2 - a4_1 * b1)) * f - b3 * aa3 * a4_1 + aa2 * b2) * aa1 ^ 2 + ((0.2e1 * b3 * (a2_1 * v11 + a4_1 * u11 + u21) * aa2 ^ 2 - 0.2e1 * aa3 * (a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) * aa2 + 0.2e1 * a4_1 * b3 * aa3 ^ 2 * u11) * f - 0.2e1 * aa2 ^ 2 * b1 + 0.2e1 * a2_1 * aa2 * aa3 * b3 - 0.2e1 * aa3 ^ 2 * (a2_1 * b2 - a4_1 * b1)) * aa1 + ((b3 * (-a2_1 * u11 + a4_1 * v11 + v21) * aa2 + aa3 * u11 * (a2_1 * b2 - a4_1 * b1)) * f + b3 * aa3 * a4_1 - aa2 * b2) * (aa2 ^ 2 + aa3 ^ 2))) f * (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((a4_1 * b3 * f * u11 + a2_1 * b2 - a4_1 * b1) * aa2 ^ 3 + (((-a2_1 * b2 * v11 + a4_1 * b1 * v11 + b1 * v21 - b2 * u21) * aa3 - b3 * (-a2_1 * u11 + a4_1 * v11 + v21) * aa1) * f + b3 * aa3 * a2_1 + aa1 * b2) * aa2 ^ 2 + ((-b3 * aa3 ^ 2 * (a2_1 * v11 - a4_1 * u11 + u21) + (-u11 * (a2_1 * b2 - a4_1 * b1) * aa1 - b3 * (a2_1 * u11 + a4_1 * v11 + v21)) * aa3 + (-b3 * (a2_1 * v11 + u21) * aa1 + a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) * aa1) * f + aa3 ^ 2 * b1 + (-a4_1 * b3 * aa1 + b2) * aa3 + ((a2_1 * b2 - b1 * (a4_1 - 0.1e1)) * aa1 + a2_1 * b3) * aa1) * aa2 + (aa1 ^ 2 + aa3 ^ 2) * (u11 * (a2_1 * b2 - a4_1 * b1) * f - a4_1 * b3)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((-u11 * (a2_1 * b2 - a4_1 * b1) * f + a4_1 * b3) * aa2 ^ 4 + ((-b3 * aa3 * (a2_1 * u11 + a4_1 * v11 + v21) + (a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) * aa1) * f + a2_1 * b3 * aa1 + aa3 * b2) * aa2 ^ 3 + ((-u11 * (a2_1 * b2 - a4_1 * b1) * aa3 ^ 2 + aa3 * (a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) + (-u11 * (a2_1 * b2 - a4_1 * b1) * aa1 + b3 * (-a2_1 * u11 + a4_1 * v11 + v21)) * aa1) * f + b3 * aa3 ^ 2 * a4_1 - b3 * aa3 * a2_1 + aa1 * (a4_1 * b3 * aa1 - b2)) * aa2 ^ 2 + ((-b3 * (a2_1 * u11 + a4_1 * v11 + v21) * aa3 ^ 3 + ((a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) * aa1 + 0.2e1 * b3 * (a2_1 * v11 + u21)) * aa3 ^ 2 - aa1 * (b3 * (a2_1 * u11 + a4_1 * v11 + v21) * aa1 - 0.2e1 * u11 * (a2_1 * b2 - a4_1 * b1)) * aa3 + aa1 ^ 2 * ((a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) * aa1 + 0.2e1 * b3 * (a2_1 * v11 + a4_1 * u11 + u21))) * f + b2 * aa3 ^ 3 + (a2_1 * b3 * aa1 + 0.2e1 * a2_1 * b2 - 0.2e1 * b1 * (a4_1 + 0.1e1)) * aa3 ^ 2 + (0.2e1 * a4_1 * b3 * aa1 + aa1 ^ 2 * b2) * aa3 + aa1 ^ 2 * (a2_1 * b3 * aa1 - 0.2e1 * b1)) * aa2 - ((aa3 * (a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) + b3 * (-a2_1 * u11 + a4_1 * v11 + v21) * aa1) * f - b3 * aa3 * a2_1 - aa1 * b2) * (aa1 ^ 2 + aa3 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((-a2_1 * b2 * v11 + a4_1 * b1 * v11 + b1 * v21 - b2 * u21) * aa3 - b3 * (-a2_1 * u11 + a4_1 * v11 + v21) * aa1) * f + b3 * aa3 * a2_1 + aa1 * b2) * aa2 ^ 2 + ((-0.2e1 * b3 * (a2_1 * v11 + u21) * aa3 ^ 2 - 0.2e1 * aa1 * u11 * (a2_1 * b2 - a4_1 * b1) * aa3 - 0.2e1 * b3 * aa1 ^ 2 * (a2_1 * v11 + a4_1 * u11 + u21)) * f + (-0.2e1 * a2_1 * b2 + 0.2e1 * b1 * (a4_1 + 0.1e1)) * aa3 ^ 2 - 0.2e1 * a4_1 * aa1 * aa3 * b3 + 0.2e1 * b1 * aa1 ^ 2) * aa2 + ((aa3 * (a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) + b3 * (-a2_1 * u11 + a4_1 * v11 + v21) * aa1) * f - b3 * aa3 * a2_1 - aa1 * b2) * (aa1 ^ 2 + aa3 ^ 2))) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((-b3 * (a2_1 * v11 - a4_1 * u11 + u21) * f + b1) * aa3 ^ 3 + (((-a2_1 * b2 * v11 + a4_1 * b1 * v11 + b1 * v21 - b2 * u21) * aa2 - u11 * (a2_1 * b2 - a4_1 * b1) * aa1) * f + b3 * (a2_1 * aa2 - a4_1 * aa1)) * aa3 ^ 2 + ((a4_1 * b3 * u11 * aa2 ^ 2 + (-b3 * (-a2_1 * u11 + a4_1 * v11 + v21) * aa1 - u11 * (a2_1 * b2 - a4_1 * b1)) * aa2 + (-b3 * (a2_1 * v11 + u21) * aa1 + a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) * aa1) * f + (a2_1 * b2 - a4_1 * b1) * aa2 ^ 2 + (a4_1 * b3 + aa1 * b2) * aa2 + ((a2_1 * b2 - b1 * (a4_1 - 0.1e1)) * aa1 + a2_1 * b3) * aa1) * aa3 + (b3 * (a2_1 * u11 + a4_1 * v11 + v21) * f - b2) * (aa1 ^ 2 + aa2 ^ 2)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((-b3 * (a2_1 * u11 + a4_1 * v11 + v21) * f + b2) * aa3 ^ 4 + ((-u11 * (a2_1 * b2 - a4_1 * b1) * aa2 + (a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) * aa1) * f + b3 * (a2_1 * aa1 + a4_1 * aa2)) * aa3 ^ 3 + ((-b3 * (a2_1 * u11 + a4_1 * v11 + v21) * aa2 ^ 2 + (a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) * aa2 - aa1 * (b3 * (a2_1 * u11 + a4_1 * v11 + v21) * aa1 - u11 * (a2_1 * b2 - a4_1 * b1))) * f - b3 * a2_1 * aa2 + a4_1 * b3 * aa1 + aa1 ^ 2 * b2 + b2 * aa2 ^ 2) * aa3 ^ 2 + ((-u11 * (a2_1 * b2 - a4_1 * b1) * aa2 ^ 3 + ((a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) * aa1 - 0.2e1 * b3 * (a2_1 * v11 + u21)) * aa2 ^ 2 + 0.2e1 * aa1 * (-u11 * (a2_1 * b2 - a4_1 * b1) * aa1 / 0.2e1 + b3 * (-a2_1 * u11 + a4_1 * v11 + v21)) * aa2 + ((a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) * aa1 + 0.2e1 * a4_1 * b3 * u11) * aa1 ^ 2) * f + a4_1 * aa2 ^ 3 * b3 + (a2_1 * b3 * aa1 - 0.2e1 * a2_1 * b2 + 0.2e1 * b1 * (a4_1 + 0.1e1)) * aa2 ^ 2 + aa1 * (a4_1 * b3 * aa1 - 0.2e1 * b2) * aa2 - 0.2e1 * aa1 ^ 2 * (-a2_1 * b3 * aa1 / 0.2e1 + a2_1 * b2 - a4_1 * b1)) * aa3 - (((a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) * aa2 + u11 * (a2_1 * b2 - a4_1 * b1) * aa1) * f - b3 * (a2_1 * aa2 - a4_1 * aa1)) * (aa1 ^ 2 + aa2 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((-a2_1 * b2 * v11 + a4_1 * b1 * v11 + b1 * v21 - b2 * u21) * aa2 - u11 * (a2_1 * b2 - a4_1 * b1) * aa1) * f + b3 * (a2_1 * aa2 - a4_1 * aa1)) * aa3 ^ 2 + (0.2e1 * b3 * (-a4_1 * u11 * aa1 ^ 2 - (-a2_1 * u11 + a4_1 * v11 + v21) * aa2 * aa1 + (a2_1 * v11 + u21) * aa2 ^ 2) * f + (0.2e1 * a2_1 * b2 - 0.2e1 * b1 * (a4_1 + 0.1e1)) * aa2 ^ 2 + 0.2e1 * aa1 * aa2 * b2 + 0.2e1 * aa1 ^ 2 * (a2_1 * b2 - a4_1 * b1)) * aa3 + (((a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) * aa2 + u11 * (a2_1 * b2 - a4_1 * b1) * aa1) * f - b3 * (a2_1 * aa2 - a4_1 * aa1)) * (aa1 ^ 2 + aa2 ^ 2))) -0.2e1 * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) * (-(((a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) * aa1 - u11 * (a2_1 * b2 - a4_1 * b1) * aa2 - b3 * aa3 * (a2_1 * u11 + a4_1 * v11 + v21)) * f + a2_1 * b3 * aa1 / 0.2e1 + a4_1 * b3 * aa2 / 0.2e1 + aa3 * b2 / 0.2e1) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((b3 * (a2_1 * v11 + u21) * aa1 ^ 2 + (b3 * (-a2_1 * u11 + a4_1 * v11 + v21) * aa2 + aa3 * u11 * (a2_1 * b2 - a4_1 * b1)) * aa1 - a4_1 * b3 * u11 * aa2 ^ 2 + aa3 * (a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21) * aa2 + b3 * aa3 ^ 2 * (a2_1 * v11 - a4_1 * u11 + u21)) * f + (-a2_1 * b2 / 0.2e1 + b1 * (a4_1 - 0.1e1) / 0.2e1) * aa1 ^ 2 + (-aa2 * b2 / 0.2e1 + b3 * aa3 * a4_1 / 0.2e1) * aa1 + (-a2_1 * b2 / 0.2e1 + a4_1 * b1 / 0.2e1) * aa2 ^ 2 - a2_1 * aa2 * aa3 * b3 / 0.2e1 - aa3 ^ 2 * b1 / 0.2e1) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (-a4_1 * b3 * u11 * aa1 ^ 2 + (-b3 * (-a2_1 * u11 + a4_1 * v11 + v21) * aa2 - aa3 * u11 * (a2_1 * b2 - a4_1 * b1)) * aa1 - (-b3 * (a2_1 * v11 + u21) * aa2 + aa3 * (a2_1 * b2 * v11 - a4_1 * b1 * v11 - b1 * v21 + b2 * u21)) * aa2) * f + (-b3 * aa3 * a4_1 / 0.2e1 + aa2 * b2 / 0.2e1) * aa1 - aa2 ^ 2 * b1 / 0.2e1 + a2_1 * aa2 * aa3 * b3 / 0.2e1 - aa3 ^ 2 * (a2_1 * b2 - a4_1 * b1) / 0.2e1)); (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((aa1 * v12 - aa2 * u12) * a3_2 - aa2 * v22) * f - aa3) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa3 * ((aa1 * u12 + aa2 * v12) * a3_2 + aa1 * v22) * f + (-aa1 ^ 2 - aa2 ^ 2) * a3_2 - aa2 * aa1) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - aa3 * ((aa1 * u12 + aa2 * v12) * a3_2 + aa1 * v22) * f - aa3 ^ 2 * a3_2 + aa2 * aa1)) * f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) -f * (-f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa1 * v12 - aa2 * u12) * a1_2 - aa2 * u22) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((((aa1 * u12 + aa2 * v12) * a1_2 + aa1 * u22) * aa3 * f + (-aa1 ^ 2 - aa2 ^ 2) * a1_2 + aa2 ^ 2 + aa3 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((aa1 * u12 + aa2 * v12) * a1_2 + aa1 * u22) * aa3 * f - aa3 ^ 2 * a1_2 + aa1 ^ 2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) -((aa3 * (u12 * a1_2 + v12 * a3_2 + u22) * f - a3_2 * aa2 - a1_2 * aa1) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((v12 * a1_2 * aa1 ^ 2 + (-u12 * a1_2 + v12 * a3_2 - u22) * aa2 * aa1 + (-a3_2 * u12 - v22) * aa2 ^ 2 - aa3 ^ 2 * (-v12 * a1_2 + a3_2 * u12 + v22)) * f + aa3 * (-a1_2 * aa2 + a3_2 * aa1)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((-a3_2 * u12 - v22) * aa1 ^ 2 - (-u12 * a1_2 + v12 * a3_2 - u22) * aa2 * aa1 + v12 * a1_2 * aa2 ^ 2) * f - aa3 * (-a1_2 * aa2 + a3_2 * aa1))) * f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * ((aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((a1_2 * b3 * f * v12 - a1_2 * b2 + a3_2 * b1) * aa1 ^ 3 + (((a1_2 * b2 * u12 - a3_2 * b1 * u12 - b1 * v22 + b2 * u22) * aa3 + b3 * (-u12 * a1_2 + v12 * a3_2 - u22) * aa2) * f + b3 * aa3 * a3_2 + aa2 * b1) * aa1 ^ 2 + ((b3 * aa3 ^ 2 * (v12 * a1_2 - a3_2 * u12 - v22) + (v12 * (a1_2 * b2 - a3_2 * b1) * aa2 + b3 * (u12 * a1_2 + v12 * a3_2 + u22)) * aa3 - (b3 * (a3_2 * u12 + v22) * aa2 - a1_2 * b2 * u12 + a3_2 * b1 * u12 + b1 * v22 - b2 * u22) * aa2) * f + aa3 ^ 2 * b2 + (-a1_2 * b3 * aa2 - b1) * aa3 - ((-a3_2 * b1 + b2 * (a1_2 - 0.1e1)) * aa2 + a3_2 * b3) * aa2) * aa1 + (v12 * (a1_2 * b2 - a3_2 * b1) * f + a1_2 * b3) * (aa2 ^ 2 + aa3 ^ 2)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((v12 * (a1_2 * b2 - a3_2 * b1) * f + a1_2 * b3) * aa1 ^ 4 + ((-b3 * aa3 * (u12 * a1_2 + v12 * a3_2 + u22) + (-a1_2 * b2 * u12 + a3_2 * b1 * u12 + b1 * v22 - b2 * u22) * aa2) * f + a3_2 * b3 * aa2 + aa3 * b1) * aa1 ^ 3 + ((v12 * (a1_2 * b2 - a3_2 * b1) * aa3 ^ 2 + (a1_2 * b2 * u12 - a3_2 * b1 * u12 - b1 * v22 + b2 * u22) * aa3 + aa2 * (v12 * (a1_2 * b2 - a3_2 * b1) * aa2 + b3 * (-u12 * a1_2 + v12 * a3_2 - u22))) * f + b3 * aa3 ^ 2 * a1_2 + b3 * aa3 * a3_2 + aa2 * (a1_2 * b3 * aa2 + b1)) * aa1 ^ 2 + ((-b3 * (u12 * a1_2 + v12 * a3_2 + u22) * aa3 ^ 3 + ((-a1_2 * b2 * u12 + a3_2 * b1 * u12 + b1 * v22 - b2 * u22) * aa2 - 0.2e1 * b3 * (a3_2 * u12 + v22)) * aa3 ^ 2 + 0.2e1 * (-b3 * (u12 * a1_2 + v12 * a3_2 + u22) * aa2 / 0.2e1 + v12 * (a1_2 * b2 - a3_2 * b1)) * aa2 * aa3 - 0.2e1 * aa2 ^ 2 * ((a1_2 * b2 * u12 / 0.2e1 - a3_2 * b1 * u12 / 0.2e1 - b1 * v22 / 0.2e1 + b2 * u22 / 0.2e1) * aa2 + b3 * (v12 * a1_2 + a3_2 * u12 + v22))) * f + b1 * aa3 ^ 3 + (a3_2 * b3 * aa2 - 0.2e1 * a3_2 * b1 + 0.2e1 * b2 * (a1_2 + 0.1e1)) * aa3 ^ 2 + (-0.2e1 * a1_2 * b3 * aa2 + aa2 ^ 2 * b1) * aa3 + aa2 ^ 2 * (a3_2 * b3 * aa2 + 0.2e1 * b2)) * aa1 - (((a1_2 * b2 * u12 - a3_2 * b1 * u12 - b1 * v22 + b2 * u22) * aa3 + b3 * (-u12 * a1_2 + v12 * a3_2 - u22) * aa2) * f + b3 * aa3 * a3_2 + aa2 * b1) * (aa2 ^ 2 + aa3 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((-b3 * (-u12 * a1_2 + v12 * a3_2 - u22) * aa2 + aa3 * (-a1_2 * b2 * u12 + a3_2 * b1 * u12 + b1 * v22 - b2 * u22)) * f - b3 * aa3 * a3_2 - aa2 * b1) * aa1 ^ 2 + ((0.2e1 * b3 * (a3_2 * u12 + v22) * aa3 ^ 2 - 0.2e1 * v12 * aa3 * (a1_2 * b2 - a3_2 * b1) * aa2 + 0.2e1 * b3 * aa2 ^ 2 * (v12 * a1_2 + a3_2 * u12 + v22)) * f + (0.2e1 * a3_2 * b1 - 0.2e1 * b2 * (a1_2 + 0.1e1)) * aa3 ^ 2 + 0.2e1 * a1_2 * aa2 * aa3 * b3 - 0.2e1 * b2 * aa2 ^ 2) * aa1 + (((a1_2 * b2 * u12 - a3_2 * b1 * u12 - b1 * v22 + b2 * u22) * aa3 + b3 * (-u12 * a1_2 + v12 * a3_2 - u22) * aa2) * f + b3 * aa3 * a3_2 + aa2 * b1) * (aa2 ^ 2 + aa3 ^ 2)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * (-((b3 * (a3_2 * u12 + v22) * f + a1_2 * b2 - a3_2 * b1 - b2) * aa2 ^ 3 + ((-b3 * (-u12 * a1_2 + v12 * a3_2 - u22) * aa1 - v12 * aa3 * (a1_2 * b2 - a3_2 * b1)) * f + b3 * aa3 * a1_2 - aa1 * b1) * aa2 ^ 2 + ((-v12 * a1_2 * b3 * aa1 ^ 2 + (aa3 * (-a1_2 * b2 * u12 + a3_2 * b1 * u12 + b1 * v22 - b2 * u22) + v12 * (a1_2 * b2 - a3_2 * b1)) * aa1 - ((v12 * a1_2 - a3_2 * u12 - v22) * aa3 + v12 * a3_2 + u12 * a1_2 + u22) * aa3 * b3) * f + aa1 ^ 2 * (a1_2 * b2 - a3_2 * b1) + b3 * (-a3_2 * aa3 + a1_2) * aa1 + aa3 * (-aa3 * b2 + b1)) * aa2 - (aa1 ^ 2 + aa3 ^ 2) * ((-a1_2 * b2 * u12 + a3_2 * b1 * u12 + b1 * v22 - b2 * u22) * f + a3_2 * b3)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((((-a1_2 * b2 * u12 + a3_2 * b1 * u12 + b1 * v22 - b2 * u22) * f + a3_2 * b3) * aa2 ^ 4 + ((v12 * (a1_2 * b2 - a3_2 * b1) * aa1 - b3 * aa3 * (u12 * a1_2 + v12 * a3_2 + u22)) * f + a1_2 * b3 * aa1 + aa3 * b1) * aa2 ^ 3 + (((-a1_2 * b2 * u12 + a3_2 * b1 * u12 + b1 * v22 - b2 * u22) * aa1 ^ 2 + b3 * (-u12 * a1_2 + v12 * a3_2 - u22) * aa1 + aa3 * (aa3 * (-a1_2 * b2 * u12 + a3_2 * b1 * u12 + b1 * v22 - b2 * u22) + v12 * (a1_2 * b2 - a3_2 * b1))) * f + b3 * a3_2 * aa1 ^ 2 + aa1 * b1 - b3 * aa3 * (-a3_2 * aa3 + a1_2)) * aa2 ^ 2 + ((v12 * (a1_2 * b2 - a3_2 * b1) * aa1 ^ 3 + 0.2e1 * ((-v12 * a3_2 / 0.2e1 - u12 * a1_2 / 0.2e1 - u22 / 0.2e1) * aa3 + v12 * a1_2 + a3_2 * u12 + v22) * b3 * aa1 ^ 2 + aa3 * (v12 * aa3 * (a1_2 * b2 - a3_2 * b1) + 0.2e1 * a1_2 * b2 * u12 - 0.2e1 * a3_2 * b1 * u12 - 0.2e1 * b1 * v22 + 0.2e1 * b2 * u22) * aa1 + 0.2e1 * ((-v12 * a3_2 / 0.2e1 - u12 * a1_2 / 0.2e1 - u22 / 0.2e1) * aa3 + v12 * a1_2) * aa3 ^ 2 * b3) * f + a1_2 * aa1 ^ 3 * b3 + (aa3 * b1 - 0.2e1 * b2) * aa1 ^ 2 + b3 * aa3 * (a1_2 * aa3 + 0.2e1 * a3_2) * aa1 + 0.2e1 * aa3 ^ 2 * (a1_2 * b2 - a3_2 * b1 + aa3 * b1 / 0.2e1)) * aa2 - (aa1 ^ 2 + aa3 ^ 2) * ((b3 * (-u12 * a1_2 + v12 * a3_2 - u22) * aa1 + v12 * aa3 * (a1_2 * b2 - a3_2 * b1)) * f - b3 * aa3 * a1_2 + aa1 * b1)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((-b3 * (-u12 * a1_2 + v12 * a3_2 - u22) * aa1 - v12 * aa3 * (a1_2 * b2 - a3_2 * b1)) * f + b3 * aa3 * a1_2 - aa1 * b1) * aa2 ^ 2 + ((-0.2e1 * b3 * (v12 * a1_2 + a3_2 * u12 + v22) * aa1 ^ 2 + 0.2e1 * (-a1_2 * b2 * u12 + a3_2 * b1 * u12 + b1 * v22 - b2 * u22) * aa3 * aa1 - 0.2e1 * v12 * a1_2 * b3 * aa3 ^ 2) * f + 0.2e1 * aa1 ^ 2 * b2 - 0.2e1 * a3_2 * aa1 * aa3 * b3 - 0.2e1 * aa3 ^ 2 * (a1_2 * b2 - a3_2 * b1)) * aa2 + (aa1 ^ 2 + aa3 ^ 2) * ((b3 * (-u12 * a1_2 + v12 * a3_2 - u22) * aa1 + v12 * aa3 * (a1_2 * b2 - a3_2 * b1)) * f - b3 * aa3 * a1_2 + aa1 * b1))) f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * (-((-b3 * (v12 * a1_2 - a3_2 * u12 - v22) * f - b2) * aa3 ^ 3 + (((-a1_2 * b2 * u12 + a3_2 * b1 * u12 + b1 * v22 - b2 * u22) * aa1 - v12 * (a1_2 * b2 - a3_2 * b1) * aa2) * f + b3 * (a1_2 * aa2 - a3_2 * aa1)) * aa3 ^ 2 + ((-v12 * a1_2 * b3 * aa1 ^ 2 + (-b3 * (-u12 * a1_2 + v12 * a3_2 - u22) * aa2 + v12 * (a1_2 * b2 - a3_2 * b1)) * aa1 + (b3 * (a3_2 * u12 + v22) * aa2 - a1_2 * b2 * u12 + a3_2 * b1 * u12 + b1 * v22 - b2 * u22) * aa2) * f + aa1 ^ 2 * (a1_2 * b2 - a3_2 * b1) + (a1_2 * b3 - aa2 * b1) * aa1 + ((a1_2 * b2 - a3_2 * b1 - b2) * aa2 + a3_2 * b3) * aa2) * aa3 + (b3 * (u12 * a1_2 + v12 * a3_2 + u22) * f - b1) * (aa1 ^ 2 + aa2 ^ 2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((-b3 * (u12 * a1_2 + v12 * a3_2 + u22) * f + b1) * aa3 ^ 4 + ((v12 * (a1_2 * b2 - a3_2 * b1) * aa1 + (-a1_2 * b2 * u12 + a3_2 * b1 * u12 + b1 * v22 - b2 * u22) * aa2) * f + b3 * (a1_2 * aa1 + a3_2 * aa2)) * aa3 ^ 3 + ((-b3 * (u12 * a1_2 + v12 * a3_2 + u22) * aa1 ^ 2 + (a1_2 * b2 * u12 - a3_2 * b1 * u12 - b1 * v22 + b2 * u22) * aa1 + (-b3 * (u12 * a1_2 + v12 * a3_2 + u22) * aa2 + v12 * (a1_2 * b2 - a3_2 * b1)) * aa2) * f - a1_2 * b3 * aa2 + a3_2 * b3 * aa1 + b1 * aa1 ^ 2 + aa2 ^ 2 * b1) * aa3 ^ 2 + ((v12 * (a1_2 * b2 - a3_2 * b1) * aa1 ^ 3 + ((-a1_2 * b2 * u12 + a3_2 * b1 * u12 + b1 * v22 - b2 * u22) * aa2 + 0.2e1 * b3 * (a3_2 * u12 + v22)) * aa1 ^ 2 + (v12 * (a1_2 * b2 - a3_2 * b1) * aa2 + 0.2e1 * b3 * (-u12 * a1_2 + v12 * a3_2 - u22)) * aa2 * aa1 + (-a1_2 * b2 * u12 + a3_2 * b1 * u12 + b1 * v22 - b2 * u22) * aa2 ^ 3 - 0.2e1 * a1_2 * aa2 ^ 2 * b3 * v12) * f + a1_2 * aa1 ^ 3 * b3 + (a3_2 * b3 * aa2 - 0.2e1 * a1_2 * b2 + 0.2e1 * a3_2 * b1 - 0.2e1 * b2) * aa1 ^ 2 + aa2 * (a1_2 * b3 * aa2 + 0.2e1 * b1) * aa1 - 0.2e1 * (-a3_2 * b3 * aa2 / 0.2e1 + a1_2 * b2 - a3_2 * b1) * aa2 ^ 2) * aa3 - (((a1_2 * b2 * u12 - a3_2 * b1 * u12 - b1 * v22 + b2 * u22) * aa1 + v12 * (a1_2 * b2 - a3_2 * b1) * aa2) * f - b3 * (a1_2 * aa2 - a3_2 * aa1)) * (aa1 ^ 2 + aa2 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((-a1_2 * b2 * u12 + a3_2 * b1 * u12 + b1 * v22 - b2 * u22) * aa1 - v12 * (a1_2 * b2 - a3_2 * b1) * aa2) * f + b3 * (a1_2 * aa2 - a3_2 * aa1)) * aa3 ^ 2 + (0.2e1 * ((-a3_2 * u12 - v22) * aa1 ^ 2 - (-u12 * a1_2 + v12 * a3_2 - u22) * aa2 * aa1 + v12 * a1_2 * aa2 ^ 2) * b3 * f + (0.2e1 * a1_2 * b2 - 0.2e1 * a3_2 * b1 + 0.2e1 * b2) * aa1 ^ 2 - 0.2e1 * b1 * aa1 * aa2 + 0.2e1 * (a1_2 * b2 - a3_2 * b1) * aa2 ^ 2) * aa3 + (((a1_2 * b2 * u12 - a3_2 * b1 * u12 - b1 * v22 + b2 * u22) * aa1 + v12 * (a1_2 * b2 - a3_2 * b1) * aa2) * f - b3 * (a1_2 * aa2 - a3_2 * aa1)) * (aa1 ^ 2 + aa2 ^ 2))) -0.2e1 * (-((v12 * (a1_2 * b2 - a3_2 * b1) * aa1 + (-a1_2 * b2 * u12 + a3_2 * b1 * u12 + b1 * v22 - b2 * u22) * aa2 - b3 * aa3 * (u12 * a1_2 + v12 * a3_2 + u22)) * f + a1_2 * b3 * aa1 / 0.2e1 + a3_2 * b3 * aa2 / 0.2e1 + aa3 * b1 / 0.2e1) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((v12 * a1_2 * b3 * aa1 ^ 2 + (b3 * (-u12 * a1_2 + v12 * a3_2 - u22) * aa2 - aa3 * (-a1_2 * b2 * u12 + a3_2 * b1 * u12 + b1 * v22 - b2 * u22)) * aa1 - b3 * (a3_2 * u12 + v22) * aa2 ^ 2 + v12 * aa3 * (a1_2 * b2 - a3_2 * b1) * aa2 + b3 * aa3 ^ 2 * (v12 * a1_2 - a3_2 * u12 - v22)) * f + (-a1_2 * b2 / 0.2e1 + a3_2 * b1 / 0.2e1) * aa1 ^ 2 + (aa2 * b1 / 0.2e1 + b3 * aa3 * a3_2 / 0.2e1) * aa1 + (b2 / 0.2e1 - a1_2 * b2 / 0.2e1 + a3_2 * b1 / 0.2e1) * aa2 ^ 2 - a1_2 * aa2 * aa3 * b3 / 0.2e1 + aa3 ^ 2 * b2 / 0.2e1) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (-b3 * (a3_2 * u12 + v22) * aa1 ^ 2 + (-b3 * (-u12 * a1_2 + v12 * a3_2 - u22) * aa2 + aa3 * (-a1_2 * b2 * u12 + a3_2 * b1 * u12 + b1 * v22 - b2 * u22)) * aa1 - v12 * (-a1_2 * b3 * aa2 + aa3 * (a1_2 * b2 - a3_2 * b1)) * aa2) * f + aa1 ^ 2 * b2 / 0.2e1 + (-b3 * aa3 * a3_2 / 0.2e1 - aa2 * b1 / 0.2e1) * aa1 - aa3 * (-a1_2 * b3 * aa2 + aa3 * (a1_2 * b2 - a3_2 * b1)) / 0.2e1)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1); (-f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((aa1 * v12 - aa2 * u12) * a4_2 + aa1 * v22) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((((aa1 * u12 + aa2 * v12) * a4_2 + aa2 * v22) * aa3 * f + (-aa1 ^ 2 - aa2 ^ 2) * a4_2 + aa1 ^ 2 + aa3 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((aa1 * u12 + aa2 * v12) * a4_2 + aa2 * v22) * aa3 * f - aa3 ^ 2 * a4_2 + aa2 ^ 2)) * f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) -f * (-(((aa1 * v12 - aa2 * u12) * a2_2 + aa1 * u22) * f + aa3) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((((aa1 * u12 + aa2 * v12) * a2_2 + aa2 * u22) * aa3 * f + (-aa1 ^ 2 - aa2 ^ 2) * a2_2 - aa2 * aa1) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((aa1 * u12 + aa2 * v12) * a2_2 + aa2 * u22) * aa3 * f - aa3 ^ 2 * a2_2 + aa2 * aa1)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) -f * ((aa3 * (a2_2 * u12 + a4_2 * v12 + v22) * f - a4_2 * aa2 - a2_2 * aa1) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((((a2_2 * v12 + u22) * aa1 ^ 2 + (-a2_2 * u12 + a4_2 * v12 + v22) * aa2 * aa1 - a4_2 * u12 * aa2 ^ 2 - aa3 ^ 2 * (-a2_2 * v12 + a4_2 * u12 - u22)) * f + aa3 * (-a2_2 * aa2 + a4_2 * aa1)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (-a4_2 * u12 * aa1 ^ 2 - (-a2_2 * u12 + a4_2 * v12 + v22) * aa2 * aa1 + (a2_2 * v12 + u22) * aa2 ^ 2) * f - aa3 * (-a2_2 * aa2 + a4_2 * aa1)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * ((aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((b3 * (a2_2 * v12 + u22) * f - a2_2 * b2 + a4_2 * b1 - b1) * aa1 ^ 3 + ((b3 * (-a2_2 * u12 + a4_2 * v12 + v22) * aa2 + aa3 * u12 * (a2_2 * b2 - a4_2 * b1)) * f + b3 * aa3 * a4_2 - aa2 * b2) * aa1 ^ 2 + ((-a4_2 * b3 * u12 * aa2 ^ 2 + (aa3 * (a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) + u12 * (a2_2 * b2 - a4_2 * b1)) * aa2 + aa3 * b3 * ((a2_2 * v12 - a4_2 * u12 + u22) * aa3 + a4_2 * v12 + a2_2 * u12 + v22)) * f + (-a2_2 * b2 + a4_2 * b1) * aa2 ^ 2 - b3 * (a2_2 * aa3 + a4_2) * aa2 - aa3 ^ 2 * b1 - aa3 * b2) * aa1 + ((a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) * f + a2_2 * b3) * (aa2 ^ 2 + aa3 ^ 2)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((((a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) * f + a2_2 * b3) * aa1 ^ 4 + ((-u12 * (a2_2 * b2 - a4_2 * b1) * aa2 - b3 * aa3 * (a2_2 * u12 + a4_2 * v12 + v22)) * f + a4_2 * b3 * aa2 + aa3 * b2) * aa1 ^ 3 + (((a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) * aa2 ^ 2 + b3 * (-a2_2 * u12 + a4_2 * v12 + v22) * aa2 + aa3 * (aa3 * (a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) + u12 * (a2_2 * b2 - a4_2 * b1))) * f + a2_2 * b3 * aa2 ^ 2 - aa2 * b2 + b3 * aa3 * (a2_2 * aa3 + a4_2)) * aa1 ^ 2 + ((-u12 * (a2_2 * b2 - a4_2 * b1) * aa2 ^ 3 - 0.2e1 * ((a4_2 * v12 / 0.2e1 + a2_2 * u12 / 0.2e1 + v22 / 0.2e1) * aa3 + a2_2 * v12 + a4_2 * u12 + u22) * b3 * aa2 ^ 2 + 0.2e1 * aa3 * (-aa3 * u12 * (a2_2 * b2 - a4_2 * b1) / 0.2e1 + a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) * aa2 - ((a2_2 * u12 + a4_2 * v12 + v22) * aa3 + 0.2e1 * a4_2 * u12) * aa3 ^ 2 * b3) * f + a4_2 * aa2 ^ 3 * b3 + (aa3 * b2 + 0.2e1 * b1) * aa2 ^ 2 - 0.2e1 * (-a4_2 * aa3 / 0.2e1 + a2_2) * aa3 * b3 * aa2 + 0.2e1 * aa3 ^ 2 * (a2_2 * b2 - a4_2 * b1 + aa3 * b2 / 0.2e1)) * aa1 - ((b3 * (-a2_2 * u12 + a4_2 * v12 + v22) * aa2 + aa3 * u12 * (a2_2 * b2 - a4_2 * b1)) * f + b3 * aa3 * a4_2 - aa2 * b2) * (aa2 ^ 2 + aa3 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((-b3 * (-a2_2 * u12 + a4_2 * v12 + v22) * aa2 - aa3 * u12 * (a2_2 * b2 - a4_2 * b1)) * f - b3 * aa3 * a4_2 + aa2 * b2) * aa1 ^ 2 + ((0.2e1 * b3 * (a2_2 * v12 + a4_2 * u12 + u22) * aa2 ^ 2 - 0.2e1 * aa3 * (a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) * aa2 + 0.2e1 * a4_2 * b3 * aa3 ^ 2 * u12) * f - 0.2e1 * aa2 ^ 2 * b1 + 0.2e1 * a2_2 * aa2 * aa3 * b3 - 0.2e1 * aa3 ^ 2 * (a2_2 * b2 - a4_2 * b1)) * aa1 + ((b3 * (-a2_2 * u12 + a4_2 * v12 + v22) * aa2 + aa3 * u12 * (a2_2 * b2 - a4_2 * b1)) * f + b3 * aa3 * a4_2 - aa2 * b2) * (aa2 ^ 2 + aa3 ^ 2))) f * (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((a4_2 * b3 * f * u12 + a2_2 * b2 - a4_2 * b1) * aa2 ^ 3 + (((-a2_2 * b2 * v12 + a4_2 * b1 * v12 + b1 * v22 - b2 * u22) * aa3 - b3 * (-a2_2 * u12 + a4_2 * v12 + v22) * aa1) * f + b3 * aa3 * a2_2 + aa1 * b2) * aa2 ^ 2 + ((-b3 * aa3 ^ 2 * (a2_2 * v12 - a4_2 * u12 + u22) + (-u12 * (a2_2 * b2 - a4_2 * b1) * aa1 - b3 * (a2_2 * u12 + a4_2 * v12 + v22)) * aa3 + (-b3 * (a2_2 * v12 + u22) * aa1 + a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) * aa1) * f + aa3 ^ 2 * b1 + (-a4_2 * b3 * aa1 + b2) * aa3 + ((a2_2 * b2 - b1 * (a4_2 - 0.1e1)) * aa1 + a2_2 * b3) * aa1) * aa2 + (aa1 ^ 2 + aa3 ^ 2) * (u12 * (a2_2 * b2 - a4_2 * b1) * f - a4_2 * b3)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((-u12 * (a2_2 * b2 - a4_2 * b1) * f + a4_2 * b3) * aa2 ^ 4 + ((-b3 * aa3 * (a2_2 * u12 + a4_2 * v12 + v22) + (a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) * aa1) * f + a2_2 * b3 * aa1 + aa3 * b2) * aa2 ^ 3 + ((-u12 * (a2_2 * b2 - a4_2 * b1) * aa3 ^ 2 + aa3 * (a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) + (-u12 * (a2_2 * b2 - a4_2 * b1) * aa1 + b3 * (-a2_2 * u12 + a4_2 * v12 + v22)) * aa1) * f + b3 * aa3 ^ 2 * a4_2 - b3 * aa3 * a2_2 + aa1 * (a4_2 * b3 * aa1 - b2)) * aa2 ^ 2 + ((-b3 * (a2_2 * u12 + a4_2 * v12 + v22) * aa3 ^ 3 + ((a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) * aa1 + 0.2e1 * b3 * (a2_2 * v12 + u22)) * aa3 ^ 2 - aa1 * (b3 * (a2_2 * u12 + a4_2 * v12 + v22) * aa1 - 0.2e1 * u12 * (a2_2 * b2 - a4_2 * b1)) * aa3 + aa1 ^ 2 * ((a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) * aa1 + 0.2e1 * b3 * (a2_2 * v12 + a4_2 * u12 + u22))) * f + b2 * aa3 ^ 3 + (a2_2 * b3 * aa1 + 0.2e1 * a2_2 * b2 - 0.2e1 * b1 * (a4_2 + 0.1e1)) * aa3 ^ 2 + (0.2e1 * a4_2 * b3 * aa1 + aa1 ^ 2 * b2) * aa3 + aa1 ^ 2 * (a2_2 * b3 * aa1 - 0.2e1 * b1)) * aa2 - ((aa3 * (a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) + b3 * (-a2_2 * u12 + a4_2 * v12 + v22) * aa1) * f - b3 * aa3 * a2_2 - aa1 * b2) * (aa1 ^ 2 + aa3 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((-a2_2 * b2 * v12 + a4_2 * b1 * v12 + b1 * v22 - b2 * u22) * aa3 - b3 * (-a2_2 * u12 + a4_2 * v12 + v22) * aa1) * f + b3 * aa3 * a2_2 + aa1 * b2) * aa2 ^ 2 + ((-0.2e1 * b3 * (a2_2 * v12 + u22) * aa3 ^ 2 - 0.2e1 * aa1 * u12 * (a2_2 * b2 - a4_2 * b1) * aa3 - 0.2e1 * b3 * aa1 ^ 2 * (a2_2 * v12 + a4_2 * u12 + u22)) * f + (-0.2e1 * a2_2 * b2 + 0.2e1 * b1 * (a4_2 + 0.1e1)) * aa3 ^ 2 - 0.2e1 * a4_2 * aa1 * aa3 * b3 + 0.2e1 * b1 * aa1 ^ 2) * aa2 + ((aa3 * (a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) + b3 * (-a2_2 * u12 + a4_2 * v12 + v22) * aa1) * f - b3 * aa3 * a2_2 - aa1 * b2) * (aa1 ^ 2 + aa3 ^ 2))) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) f * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * (-(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((-b3 * (a2_2 * v12 - a4_2 * u12 + u22) * f + b1) * aa3 ^ 3 + (((-a2_2 * b2 * v12 + a4_2 * b1 * v12 + b1 * v22 - b2 * u22) * aa2 - u12 * (a2_2 * b2 - a4_2 * b1) * aa1) * f + b3 * (a2_2 * aa2 - a4_2 * aa1)) * aa3 ^ 2 + ((a4_2 * b3 * u12 * aa2 ^ 2 + (-b3 * (-a2_2 * u12 + a4_2 * v12 + v22) * aa1 - u12 * (a2_2 * b2 - a4_2 * b1)) * aa2 + (-b3 * (a2_2 * v12 + u22) * aa1 + a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) * aa1) * f + (a2_2 * b2 - a4_2 * b1) * aa2 ^ 2 + (a4_2 * b3 + aa1 * b2) * aa2 + ((a2_2 * b2 - b1 * (a4_2 - 0.1e1)) * aa1 + a2_2 * b3) * aa1) * aa3 + (b3 * (a2_2 * u12 + a4_2 * v12 + v22) * f - b2) * (aa1 ^ 2 + aa2 ^ 2)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((-b3 * (a2_2 * u12 + a4_2 * v12 + v22) * f + b2) * aa3 ^ 4 + ((-u12 * (a2_2 * b2 - a4_2 * b1) * aa2 + (a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) * aa1) * f + b3 * (a2_2 * aa1 + a4_2 * aa2)) * aa3 ^ 3 + ((-b3 * (a2_2 * u12 + a4_2 * v12 + v22) * aa2 ^ 2 + (a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) * aa2 - aa1 * (b3 * (a2_2 * u12 + a4_2 * v12 + v22) * aa1 - u12 * (a2_2 * b2 - a4_2 * b1))) * f - b3 * a2_2 * aa2 + a4_2 * b3 * aa1 + aa1 ^ 2 * b2 + b2 * aa2 ^ 2) * aa3 ^ 2 + ((-u12 * (a2_2 * b2 - a4_2 * b1) * aa2 ^ 3 + ((a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) * aa1 - 0.2e1 * b3 * (a2_2 * v12 + u22)) * aa2 ^ 2 + 0.2e1 * aa1 * (-u12 * (a2_2 * b2 - a4_2 * b1) * aa1 / 0.2e1 + b3 * (-a2_2 * u12 + a4_2 * v12 + v22)) * aa2 + ((a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) * aa1 + 0.2e1 * a4_2 * b3 * u12) * aa1 ^ 2) * f + a4_2 * aa2 ^ 3 * b3 + (a2_2 * b3 * aa1 - 0.2e1 * a2_2 * b2 + 0.2e1 * b1 * (a4_2 + 0.1e1)) * aa2 ^ 2 + aa1 * (a4_2 * b3 * aa1 - 0.2e1 * b2) * aa2 - 0.2e1 * aa1 ^ 2 * (-a2_2 * b3 * aa1 / 0.2e1 + a2_2 * b2 - a4_2 * b1)) * aa3 - (((a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) * aa2 + u12 * (a2_2 * b2 - a4_2 * b1) * aa1) * f - b3 * (a2_2 * aa2 - a4_2 * aa1)) * (aa1 ^ 2 + aa2 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((-a2_2 * b2 * v12 + a4_2 * b1 * v12 + b1 * v22 - b2 * u22) * aa2 - u12 * (a2_2 * b2 - a4_2 * b1) * aa1) * f + b3 * (a2_2 * aa2 - a4_2 * aa1)) * aa3 ^ 2 + (0.2e1 * b3 * (-a4_2 * u12 * aa1 ^ 2 - (-a2_2 * u12 + a4_2 * v12 + v22) * aa2 * aa1 + (a2_2 * v12 + u22) * aa2 ^ 2) * f + (0.2e1 * a2_2 * b2 - 0.2e1 * b1 * (a4_2 + 0.1e1)) * aa2 ^ 2 + 0.2e1 * aa1 * aa2 * b2 + 0.2e1 * aa1 ^ 2 * (a2_2 * b2 - a4_2 * b1)) * aa3 + (((a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) * aa2 + u12 * (a2_2 * b2 - a4_2 * b1) * aa1) * f - b3 * (a2_2 * aa2 - a4_2 * aa1)) * (aa1 ^ 2 + aa2 ^ 2))) -0.2e1 * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.3e1 / 0.2e1) * (-(((a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) * aa1 - u12 * (a2_2 * b2 - a4_2 * b1) * aa2 - b3 * aa3 * (a2_2 * u12 + a4_2 * v12 + v22)) * f + a2_2 * b3 * aa1 / 0.2e1 + a4_2 * b3 * aa2 / 0.2e1 + aa3 * b2 / 0.2e1) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (((b3 * (a2_2 * v12 + u22) * aa1 ^ 2 + (b3 * (-a2_2 * u12 + a4_2 * v12 + v22) * aa2 + aa3 * u12 * (a2_2 * b2 - a4_2 * b1)) * aa1 - a4_2 * b3 * u12 * aa2 ^ 2 + aa3 * (a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22) * aa2 + b3 * aa3 ^ 2 * (a2_2 * v12 - a4_2 * u12 + u22)) * f + (-a2_2 * b2 / 0.2e1 + b1 * (a4_2 - 0.1e1) / 0.2e1) * aa1 ^ 2 + (-aa2 * b2 / 0.2e1 + b3 * aa3 * a4_2 / 0.2e1) * aa1 + (-a2_2 * b2 / 0.2e1 + a4_2 * b1 / 0.2e1) * aa2 ^ 2 - a2_2 * aa2 * aa3 * b3 / 0.2e1 - aa3 ^ 2 * b1 / 0.2e1) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (-a4_2 * b3 * u12 * aa1 ^ 2 + (-b3 * (-a2_2 * u12 + a4_2 * v12 + v22) * aa2 - aa3 * u12 * (a2_2 * b2 - a4_2 * b1)) * aa1 - (-b3 * (a2_2 * v12 + u22) * aa2 + aa3 * (a2_2 * b2 * v12 - a4_2 * b1 * v12 - b1 * v22 + b2 * u22)) * aa2) * f + (-b3 * aa3 * a4_2 / 0.2e1 + aa2 * b2 / 0.2e1) * aa1 - aa2 ^ 2 * b1 / 0.2e1 + a2_2 * aa2 * aa3 * b3 / 0.2e1 - aa3 ^ 2 * (a2_2 * b2 - a4_2 * b1) / 0.2e1)); (b1 ^ 2 + b2 ^ 2 + b3 ^ 2) ^ (-0.1e1 / 0.2e1) * b1 (b1 ^ 2 + b2 ^ 2 + b3 ^ 2) ^ (-0.1e1 / 0.2e1) * b2 (b1 ^ 2 + b2 ^ 2 + b3 ^ 2) ^ (-0.1e1 / 0.2e1) * b3 0 0 0 0;];
end
