function [ C_F ] = Ef_6pts( p1, p2, F, C )
%F_7PTS - propagation of the uncertainty using (Harley - Multiple View Geometry in Computer Vision (Second Edition), Eq.11.3 page 279)
% Input: 
%   p1  ...  2x6pts [u11 u12 u13 ... u16; v11 v12 v13 ... v16] (first image)
%   p2  ...  2x6pts [u21 u22 u23 ... u26; v21 v22 v23 ... v26] (second image)
%   F   ... the fundamental matrix
%   C    ... 24x24 covariance matrix of input points [u11 v11 u12 v12 u13 v13 ... u16 v16   u21 v21 u22 v22 u23 v23 ... u26 v26]
% Output:
%   C_F ... 9x9 covariance matrix of homography parameters [f11 f21 f31 f12 f22 f32 f13 f23 f33]

    % normalize F
    F = normalizeMatrix(F);
    
    % compute the derivatives
    A = deriv_measurements( p1(1),p1(2),p1(3),p1(4),p1(5),p1(6),p1(7),p1(8),p1(9),p1(10),p1(11),p1(12),...
                            p2(1),p2(2),p2(3),p2(4),p2(5),p2(6),p2(7),p2(8),p2(9),p2(10),p2(11),p2(12),...
                            F(1),F(2),F(3),F(4),F(5),F(6),F(7),F(8));
                        
    B = deriv_params(   p1(1),p1(2),p1(3),p1(4),p1(5),p1(6),p1(7),p1(8),p1(9),p1(10),p1(11),p1(12),...
                        p2(1),p2(2),p2(3),p2(4),p2(5),p2(6),p2(7),p2(8),p2(9),p2(10),p2(11),p2(12),...
                        F(1),F(2),F(3),F(4),F(5),F(6),F(7),F(8),F(9));
                   
    % the propagation
    iBA = B \ A;
    C_F = iBA * C * iBA';

end

function A = deriv_measurements(u11,v11,u12,v12,u13,v13,u14,v14,u15,v15,u16,v16, ...
                                u21,v21,u22,v22,u23,v23,u24,v24,u25,v25,u26,v26,...
                                f11, f21, f31, f12, f22, f32, f13, f23)    % e11, e21, e31, e12, e22, e32, e13, e23)
    A = [f11 * u21 + f21 * v21 + f31 f12 * u21 + f22 * v21 + f32 0 0 0 0 0 0 0 0 0 0 f11 * u11 + f12 * v11 + f13 f21 * u11 + f22 * v11 + f23 0 0 0 0 0 0 0 0 0 0; 0 0 f11 * u22 + f21 * v22 + f31 f12 * u22 + f22 * v22 + f32 0 0 0 0 0 0 0 0 0 0 f11 * u12 + f12 * v12 + f13 f21 * u12 + f22 * v12 + f23 0 0 0 0 0 0 0 0; 0 0 0 0 f11 * u23 + f21 * v23 + f31 f12 * u23 + f22 * v23 + f32 0 0 0 0 0 0 0 0 0 0 f11 * u13 + f12 * v13 + f13 f21 * u13 + f22 * v13 + f23 0 0 0 0 0 0; 0 0 0 0 0 0 f11 * u24 + f21 * v24 + f31 f12 * u24 + f22 * v24 + f32 0 0 0 0 0 0 0 0 0 0 f11 * u14 + f12 * v14 + f13 f21 * u14 + f22 * v14 + f23 0 0 0 0; 0 0 0 0 0 0 0 0 f11 * u25 + f21 * v25 + f31 f12 * u25 + f22 * v25 + f32 0 0 0 0 0 0 0 0 0 0 f11 * u15 + f12 * v15 + f13 f21 * u15 + f22 * v15 + f23 0 0; 0 0 0 0 0 0 0 0 0 0 f11 * u26 + f21 * v26 + f31 f12 * u26 + f22 * v26 + f32 0 0 0 0 0 0 0 0 0 0 f11 * u16 + f12 * v16 + f13 f21 * u16 + f22 * v16 + f23; 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;];
end

function B = deriv_params(  u11,v11,u12,v12,u13,v13,u14,v14,u15,v15,u16,v16, ...
                            u21,v21,u22,v22,u23,v23,u24,v24,u25,v25,u26,v26,...
                            f11, f21, f31, f12, f22, f32, f13, f23, f33)    % e11, e21, e31, e12, e22, e32, e13, e23)
    B = [u21 * u11 v21 * u11 u11 v11 * u21 v21 * v11 v11 u21 v21 1; u22 * u12 v22 * u12 u12 v12 * u22 v22 * v12 v12 u22 v22 1; u23 * u13 v23 * u13 u13 v13 * u23 v23 * v13 v13 u23 v23 1; u24 * u14 v24 * u14 u14 v14 * u24 v24 * v14 v14 u24 v24 1; u25 * u15 v25 * u15 u15 v15 * u25 v25 * v15 v15 u25 v25 1; u26 * u16 v26 * u16 u16 v16 * u26 v26 * v16 v16 u26 v26 1; f22 * f33 - f23 * f32 -f12 * f33 + f13 * f32 f12 * f23 - f13 * f22 -f21 * f33 + f23 * f31 f11 * f33 - f13 * f31 -f11 * f23 + f13 * f21 f21 * f32 - f22 * f31 -f11 * f32 + f12 * f31 f11 * f22 - f12 * f21; ((f11 ^ 2) + (f12 ^ 2) + (f13 ^ 2) + (f21 ^ 2) + (f22 ^ 2) + (f23 ^ 2) + (f31 ^ 2) + (f32 ^ 2) + f33 ^ 2) ^ (-0.1e1 / 0.2e1) * f11 ((f11 ^ 2) + (f12 ^ 2) + (f13 ^ 2) + (f21 ^ 2) + (f22 ^ 2) + (f23 ^ 2) + (f31 ^ 2) + (f32 ^ 2) + f33 ^ 2) ^ (-0.1e1 / 0.2e1) * f21 ((f11 ^ 2) + (f12 ^ 2) + (f13 ^ 2) + (f21 ^ 2) + (f22 ^ 2) + (f23 ^ 2) + (f31 ^ 2) + (f32 ^ 2) + f33 ^ 2) ^ (-0.1e1 / 0.2e1) * f31 ((f11 ^ 2) + (f12 ^ 2) + (f13 ^ 2) + (f21 ^ 2) + (f22 ^ 2) + (f23 ^ 2) + (f31 ^ 2) + (f32 ^ 2) + f33 ^ 2) ^ (-0.1e1 / 0.2e1) * f12 ((f11 ^ 2) + (f12 ^ 2) + (f13 ^ 2) + (f21 ^ 2) + (f22 ^ 2) + (f23 ^ 2) + (f31 ^ 2) + (f32 ^ 2) + f33 ^ 2) ^ (-0.1e1 / 0.2e1) * f22 ((f11 ^ 2) + (f12 ^ 2) + (f13 ^ 2) + (f21 ^ 2) + (f22 ^ 2) + (f23 ^ 2) + (f31 ^ 2) + (f32 ^ 2) + f33 ^ 2) ^ (-0.1e1 / 0.2e1) * f32 ((f11 ^ 2) + (f12 ^ 2) + (f13 ^ 2) + (f21 ^ 2) + (f22 ^ 2) + (f23 ^ 2) + (f31 ^ 2) + (f32 ^ 2) + f33 ^ 2) ^ (-0.1e1 / 0.2e1) * f13 ((f11 ^ 2) + (f12 ^ 2) + (f13 ^ 2) + (f21 ^ 2) + (f22 ^ 2) + (f23 ^ 2) + (f31 ^ 2) + (f32 ^ 2) + f33 ^ 2) ^ (-0.1e1 / 0.2e1) * f23 ((f11 ^ 2) + (f12 ^ 2) + (f13 ^ 2) + (f21 ^ 2) + (f22 ^ 2) + (f23 ^ 2) + (f31 ^ 2) + (f32 ^ 2) + f33 ^ 2) ^ (-0.1e1 / 0.2e1) * f33; f31 * f13 ^ 3 - 2 * f11 * f33 * f13 ^ 2 + (-f31 ^ 3 + (f23 ^ 2 - f32 ^ 2) * f31 - 2 * f33 * f21 * f23) * f13 + 2 * f31 * f33 * (f11 * f31 + f12 * f32) f31 * f23 ^ 3 - 2 * f33 * f21 * f23 ^ 2 + (-f31 ^ 3 + (f13 ^ 2 - f32 ^ 2) * f31 - 2 * f11 * f13 * f33) * f23 + 2 * f31 * f33 * (f21 * f31 + f22 * f32) 2 * f11 ^ 2 * f31 * f33 + (f13 ^ 3 + (f23 ^ 2 - 3 * f31 ^ 2 - f32 ^ 2) * f13 + 2 * f12 * f32 * f33) * f11 + f21 * f23 * f13 ^ 2 - 2 * f12 * f13 * f31 * f32 + 2 * f21 ^ 2 * f31 * f33 + (f23 ^ 3 + (-3 * f31 ^ 2 - f32 ^ 2) * f23 + 2 * f22 * f32 * f33) * f21 - 2 * f22 * f23 * f31 * f32 f32 * f13 ^ 3 - 2 * f12 * f33 * f13 ^ 2 + (-f32 ^ 3 + (f23 ^ 2 - f31 ^ 2) * f32 - 2 * f33 * f22 * f23) * f13 + 2 * f32 * f33 * (f11 * f31 + f12 * f32) f32 * f23 ^ 3 - 2 * f33 * f22 * f23 ^ 2 + (-f32 ^ 3 + (f13 ^ 2 - f31 ^ 2) * f32 - 2 * f12 * f13 * f33) * f23 + 2 * f32 * f33 * (f21 * f31 + f22 * f32) 2 * f12 ^ 2 * f32 * f33 + (f13 ^ 3 + (f23 ^ 2 - f31 ^ 2 - 3 * f32 ^ 2) * f13 + 2 * f11 * f31 * f33) * f12 + f22 * f23 * f13 ^ 2 - 2 * f11 * f13 * f31 * f32 + 2 * f22 ^ 2 * f32 * f33 + (f23 ^ 3 + (-f31 ^ 2 - 3 * f32 ^ 2) * f23 + 2 * f21 * f31 * f33) * f22 - 2 * f21 * f23 * f31 * f32 -2 * f11 ^ 2 * f13 * f33 + (3 * f13 ^ 2 * f31 - 2 * f33 * f21 * f23 + f31 * f23 ^ 2 - f31 ^ 3 - f31 * f32 ^ 2) * f11 - 2 * f12 ^ 2 * f13 * f33 + (3 * f13 ^ 2 * f32 - 2 * f33 * f22 * f23 + f32 * f23 ^ 2 - f31 ^ 2 * f32 - f32 ^ 3) * f12 + 2 * f13 * f23 * (f21 * f31 + f22 * f32) (f21 * f31 + f22 * f32) * f13 ^ 2 + (-2 * f11 * f21 * f33 - 2 * f12 * f33 * f22 + 2 * (f11 * f31 + f12 * f32) * f23) * f13 - 2 * f21 ^ 2 * f23 * f33 + (3 * f31 * f23 ^ 2 - f31 ^ 3 - f31 * f32 ^ 2) * f21 - 2 * f22 ^ 2 * f23 * f33 + (3 * f32 * f23 ^ 2 - f31 ^ 2 * f32 - f32 ^ 3) * f22 (-f13 ^ 2 + f31 ^ 2) * f11 ^ 2 + (2 * f32 * f12 * f31 - 2 * f13 * f21 * f23) * f11 + (-f13 ^ 2 + f32 ^ 2) * f12 ^ 2 - 2 * f12 * f13 * f22 * f23 + (-f23 ^ 2 + f31 ^ 2) * f21 ^ 2 + 2 * f21 * f22 * f31 * f32 + (-f23 ^ 2 + f32 ^ 2) * f22 ^ 2;];
end