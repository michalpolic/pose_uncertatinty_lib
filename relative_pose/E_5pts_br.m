function [ C_E ] = E_5pts_br2( p1, p2, E, C )
%E_5PTS - propagate the uncertainty from 5 points correspondences into the
% uncertatinty of essential matrixs
% Input: 
%   p1  ...  2x5pts [u11 u12 u13 ...; v11 v12 v13 ...] (first image)
%   p2  ...  2x5pts [u21 u22 u23 ...; v21 v22 v23 ...] (second image)
%   E   ...  the essential matrix
%   C   ...  20x20 covariance matrix of input points [u11 v11 u12 v12 u13 v13 ... u21 v21 u22 v22 u23 v23 ...]
% Output:
%   C_E ... 5x5 covariance matrix of reduced essential matrix parameters 

    % decompose
    [b, ~, aa] = bR_from_E_uv(E, a2h(p1)', a2h(p2)');
    
    
    % compute the derivatives
    A = deriv_measurements( p1(1),p1(2),p1(3),p1(4),p1(5),p1(6),p1(7),p1(8),p1(9),p1(10),...
                            p2(1),p2(2),p2(3),p2(4),p2(5),p2(6),p2(7),p2(8),p2(9),p2(10),...
                            aa(1), aa(2), aa(3), b(1), b(2), b(3));

    B = deriv_params(   p1(1),p1(2),p1(3),p1(4),p1(5),p1(6),p1(7),p1(8),p1(9),p1(10),...
                        p2(1),p2(2),p2(3),p2(4),p2(5),p2(6),p2(7),p2(8),p2(9),p2(10),...
                        aa(1), aa(2), aa(3), b(1), b(2), b(3));
         
    % the propagation
    iBA = B \ A;
    C_E = iBA * C * iBA';   
end

function A = deriv_measurements(u11, v11, u12, v12, u13, v13, u14, v14, u15, v15, ...
                                u21, v21, u22, v22, u23, v23, u24, v24, u25, v25, ...
                                aa1, aa2, aa3, b1, b2, b3)
    A = [((((b3 * u21 - b1) * aa2 + aa3 * (b1 * v21 - b2 * u21)) * aa1 - (aa2 ^ 2 + aa3 ^ 2) * (-v21 * b3 + b2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((b1 * v21 - b2 * u21) * aa2 + aa3 * (-b3 * u21 + b1)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((-b3 * u21 + b1) * aa2 + (v21 * b3 - b2) * aa1 - aa3 * (b1 * v21 - b2 * u21)) * aa1) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((((-v21 * b3 + b2) * aa1 + aa3 * (b1 * v21 - b2 * u21)) * aa2 + (aa1 ^ 2 + aa3 ^ 2) * (-b3 * u21 + b1)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((b1 * v21 - b2 * u21) * aa1 - aa3 * (-v21 * b3 + b2)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + aa2 * ((-b3 * u21 + b1) * aa2 + (v21 * b3 - b2) * aa1 - aa3 * (b1 * v21 - b2 * u21))) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) 0 0 0 0 0 0 0 0 ((b2 * aa2 ^ 2 + ((-b2 * v11 + b3) * aa3 + b3 * aa1 * u11) * aa2 - b3 * v11 * aa3 ^ 2 - aa1 * aa3 * b2 * u11 + (-b3 * v11 + b2) * aa1 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (-b2 * u11 * aa2 - aa3 * b3 * u11 + aa1 * (b2 * v11 + b3)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (aa1 * u11 + aa2 * v11 + aa3) * (-aa2 * b3 + aa3 * b2)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((-b1 * aa1 ^ 2 + (-b3 * v11 * aa2 + aa3 * (b1 * u11 - b3)) * aa1 + b3 * u11 * aa3 ^ 2 + aa3 * b1 * v11 * aa2 - aa2 ^ 2 * (-b3 * u11 + b1)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (b1 * v11 * aa1 + aa3 * b3 * v11 - aa2 * (b1 * u11 + b3)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-aa1 * b3 + aa3 * b1) * (aa1 * u11 + aa2 * v11 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) 0 0 0 0 0 0 0 0; 0 0 ((((b3 * u22 - b1) * aa2 + aa3 * (b1 * v22 - b2 * u22)) * aa1 - (aa2 ^ 2 + aa3 ^ 2) * (-v22 * b3 + b2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((b1 * v22 - b2 * u22) * aa2 + aa3 * (-b3 * u22 + b1)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((-b3 * u22 + b1) * aa2 + (v22 * b3 - b2) * aa1 - aa3 * (b1 * v22 - b2 * u22)) * aa1) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((((-v22 * b3 + b2) * aa1 + aa3 * (b1 * v22 - b2 * u22)) * aa2 + (aa1 ^ 2 + aa3 ^ 2) * (-b3 * u22 + b1)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((b1 * v22 - b2 * u22) * aa1 - aa3 * (-v22 * b3 + b2)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + aa2 * ((-b3 * u22 + b1) * aa2 + (v22 * b3 - b2) * aa1 - aa3 * (b1 * v22 - b2 * u22))) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) 0 0 0 0 0 0 0 0 ((b2 * aa2 ^ 2 + ((-b2 * v12 + b3) * aa3 + b3 * aa1 * u12) * aa2 - b3 * v12 * aa3 ^ 2 - aa1 * aa3 * b2 * u12 + (-b3 * v12 + b2) * aa1 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (-b2 * u12 * aa2 - aa3 * b3 * u12 + aa1 * (b2 * v12 + b3)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (aa1 * u12 + aa2 * v12 + aa3) * (-aa2 * b3 + aa3 * b2)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((-b1 * aa1 ^ 2 + (-b3 * v12 * aa2 + aa3 * (b1 * u12 - b3)) * aa1 + b3 * u12 * aa3 ^ 2 + aa3 * b1 * v12 * aa2 - aa2 ^ 2 * (-b3 * u12 + b1)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (b1 * v12 * aa1 + aa3 * b3 * v12 - aa2 * (b1 * u12 + b3)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-aa1 * b3 + aa3 * b1) * (aa1 * u12 + aa2 * v12 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) 0 0 0 0 0 0; 0 0 0 0 ((((b3 * u23 - b1) * aa2 + aa3 * (b1 * v23 - b2 * u23)) * aa1 - (aa2 ^ 2 + aa3 ^ 2) * (-v23 * b3 + b2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((b1 * v23 - b2 * u23) * aa2 + aa3 * (-b3 * u23 + b1)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((-b3 * u23 + b1) * aa2 + (v23 * b3 - b2) * aa1 - aa3 * (b1 * v23 - b2 * u23)) * aa1) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((((-v23 * b3 + b2) * aa1 + aa3 * (b1 * v23 - b2 * u23)) * aa2 + (aa1 ^ 2 + aa3 ^ 2) * (-b3 * u23 + b1)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((b1 * v23 - b2 * u23) * aa1 - aa3 * (-v23 * b3 + b2)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + aa2 * ((-b3 * u23 + b1) * aa2 + (v23 * b3 - b2) * aa1 - aa3 * (b1 * v23 - b2 * u23))) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) 0 0 0 0 0 0 0 0 ((b2 * aa2 ^ 2 + ((-b2 * v13 + b3) * aa3 + b3 * aa1 * u13) * aa2 - b3 * v13 * aa3 ^ 2 - aa1 * aa3 * b2 * u13 + (-b3 * v13 + b2) * aa1 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (-b2 * u13 * aa2 - aa3 * b3 * u13 + aa1 * (b2 * v13 + b3)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (aa1 * u13 + aa2 * v13 + aa3) * (-aa2 * b3 + aa3 * b2)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((-b1 * aa1 ^ 2 + (-b3 * v13 * aa2 + aa3 * (b1 * u13 - b3)) * aa1 + b3 * u13 * aa3 ^ 2 + aa3 * b1 * v13 * aa2 - aa2 ^ 2 * (-b3 * u13 + b1)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (b1 * v13 * aa1 + aa3 * b3 * v13 - aa2 * (b1 * u13 + b3)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-aa1 * b3 + aa3 * b1) * (aa1 * u13 + aa2 * v13 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) 0 0 0 0; 0 0 0 0 0 0 ((((b3 * u24 - b1) * aa2 + aa3 * (b1 * v24 - b2 * u24)) * aa1 - (aa2 ^ 2 + aa3 ^ 2) * (-v24 * b3 + b2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((b1 * v24 - b2 * u24) * aa2 + aa3 * (-b3 * u24 + b1)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((-b3 * u24 + b1) * aa2 + (v24 * b3 - b2) * aa1 - aa3 * (b1 * v24 - b2 * u24)) * aa1) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((((-v24 * b3 + b2) * aa1 + aa3 * (b1 * v24 - b2 * u24)) * aa2 + (aa1 ^ 2 + aa3 ^ 2) * (-b3 * u24 + b1)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((b1 * v24 - b2 * u24) * aa1 - aa3 * (-v24 * b3 + b2)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + aa2 * ((-b3 * u24 + b1) * aa2 + (v24 * b3 - b2) * aa1 - aa3 * (b1 * v24 - b2 * u24))) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) 0 0 0 0 0 0 0 0 ((b2 * aa2 ^ 2 + ((-b2 * v14 + b3) * aa3 + b3 * aa1 * u14) * aa2 - b3 * v14 * aa3 ^ 2 - aa1 * aa3 * b2 * u14 + (-b3 * v14 + b2) * aa1 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (-b2 * u14 * aa2 - aa3 * b3 * u14 + aa1 * (b2 * v14 + b3)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (aa1 * u14 + aa2 * v14 + aa3) * (-aa2 * b3 + aa3 * b2)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((-b1 * aa1 ^ 2 + (-b3 * v14 * aa2 + aa3 * (b1 * u14 - b3)) * aa1 + b3 * u14 * aa3 ^ 2 + aa3 * b1 * v14 * aa2 - aa2 ^ 2 * (-b3 * u14 + b1)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (b1 * v14 * aa1 + aa3 * b3 * v14 - aa2 * (b1 * u14 + b3)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-aa1 * b3 + aa3 * b1) * (aa1 * u14 + aa2 * v14 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) 0 0; 0 0 0 0 0 0 0 0 ((((b3 * u25 - b1) * aa2 + aa3 * (b1 * v25 - b2 * u25)) * aa1 - (aa2 ^ 2 + aa3 ^ 2) * (-v25 * b3 + b2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * ((b1 * v25 - b2 * u25) * aa2 + aa3 * (-b3 * u25 + b1)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((-b3 * u25 + b1) * aa2 + (v25 * b3 - b2) * aa1 - aa3 * (b1 * v25 - b2 * u25)) * aa1) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((((-v25 * b3 + b2) * aa1 + aa3 * (b1 * v25 - b2 * u25)) * aa2 + (aa1 ^ 2 + aa3 ^ 2) * (-b3 * u25 + b1)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - ((b1 * v25 - b2 * u25) * aa1 - aa3 * (-v25 * b3 + b2)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + aa2 * ((-b3 * u25 + b1) * aa2 + (v25 * b3 - b2) * aa1 - aa3 * (b1 * v25 - b2 * u25))) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) 0 0 0 0 0 0 0 0 ((b2 * aa2 ^ 2 + ((-b2 * v15 + b3) * aa3 + b3 * aa1 * u15) * aa2 - b3 * v15 * aa3 ^ 2 - aa1 * aa3 * b2 * u15 + (-b3 * v15 + b2) * aa1 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (-b2 * u15 * aa2 - aa3 * b3 * u15 + aa1 * (b2 * v15 + b3)) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (aa1 * u15 + aa2 * v15 + aa3) * (-aa2 * b3 + aa3 * b2)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((-b1 * aa1 ^ 2 + (-b3 * v15 * aa2 + aa3 * (b1 * u15 - b3)) * aa1 + b3 * u15 * aa3 ^ 2 + aa3 * b1 * v15 * aa2 - aa2 ^ 2 * (-b3 * u15 + b1)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (b1 * v15 * aa1 + aa3 * b3 * v15 - aa2 * (b1 * u15 + b3)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-aa1 * b3 + aa3 * b1) * (aa1 * u15 + aa2 * v15 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2); 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
end

function B = deriv_params(  u11, v11, u12, v12, u13, v13, u14, v14, u15, v15, ...
                            u21, v21, u22, v22, u23, v23, u24, v24, u25, v25, ...
                            aa1, aa2, aa3, b1, b2, b3)
    B = [((-v21 * aa2 ^ 2 + (aa3 * v11 * v21 - aa1 * u11 - aa3) * aa2 + v11 * aa3 ^ 2 + aa1 * aa3 * u11 * v21 + (-v21 + v11) * aa1 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (aa1 * v11 * v21 - v21 * u11 * aa2 - aa3 * u11 + aa1) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (-aa3 * v21 + aa2) * (aa1 * u11 + aa2 * v11 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((u21 * aa1 ^ 2 + (-aa3 * u11 * u21 + aa2 * v11 + aa3) * aa1 - u11 * aa3 ^ 2 - aa3 * v11 * u21 * aa2 - aa2 ^ 2 * (u11 - u21)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (v11 * u21 * aa1 - aa2 * u11 * u21 + aa3 * v11 - aa2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-aa3 * u21 + aa1) * (aa1 * u11 + aa2 * v11 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((-v11 * u21 * aa1 ^ 2 + ((u11 * u21 - v11 * v21) * aa2 - aa3 * v21) * aa1 + v21 * u11 * aa2 ^ 2 + aa3 * u21 * aa2 + (u11 * v21 - u21 * v11) * aa3 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (u21 * aa1 + v21 * aa2 - aa3 * (u11 * u21 + v11 * v21)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (aa1 * v21 - aa2 * u21) * (aa1 * u11 + aa2 * v11 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) -(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * (-((b1 * v21 - b2 * u21 - v11 * (-b3 * u21 + b1)) * aa1 ^ 3 + ((v11 * (v21 * b3 - b2) + (-b3 * u21 + b1) * u11) * aa2 - aa3 * ((b1 * v21 - b2 * u21) * u11 - v21 * b3 + b2)) * aa1 ^ 2 + (((-v21 * b3 + b2) * u11 + b1 * v21 - b2 * u21) * aa2 ^ 2 + ((-b1 * v21 * v11 + b2 * u21 * v11 - b3 * u21 + b1) * aa3 + (-b1 * v21 + b2 * u21) * u11 - v21 * b3 + b2) * aa2 - (((v21 * b3 - b2) * u11 + v11 * (-b3 * u21 + b1)) * aa3 + (-b3 * u21 + b1) * u11 - v11 * (v21 * b3 - b2)) * aa3) * aa1 - (aa2 ^ 2 + aa3 ^ 2) * (b1 * v21 * v11 - b2 * u21 * v11 - b3 * u21 + b1)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((b1 * v21 * v11 - b2 * u21 * v11 - b3 * u21 + b1) * aa1 ^ 4 + (((-b1 * v21 + b2 * u21) * u11 - v21 * b3 + b2) * aa2 - aa3 * ((-b3 * u21 + b1) * u11 - v11 * (v21 * b3 - b2))) * aa1 ^ 3 + ((b1 * v21 * v11 - b2 * u21 * v11 - b3 * u21 + b1) * aa2 ^ 2 + ((b3 * u21 - b1) * u11 - v11 * (v21 * b3 - b2)) * aa2 + aa3 * ((b1 * v21 * v11 - b2 * u21 * v11 - b3 * u21 + b1) * aa3 + (b1 * v21 - b2 * u21) * u11 - v21 * b3 + b2)) * aa1 ^ 2 + (((-b1 * v21 + b2 * u21) * u11 - v21 * b3 + b2) * aa2 ^ 3 + (((b3 * u21 - b1) * u11 + v11 * (v21 * b3 - b2)) * aa3 + (0.2e1 * v21 * b3 - 0.2e1 * b2) * u11 - 0.2e1 * v11 * (-b3 * u21 + b1)) * aa2 ^ 2 - (((b1 * v21 - b2 * u21) * u11 + v21 * b3 - b2) * aa3 - 0.2e1 * b1 * v21 * v11 + 0.2e1 * b2 * u21 * v11 - 0.2e1 * b3 * u21 + 0.2e1 * b1) * aa3 * aa2 + 0.2e1 * ((u11 * (b3 * u21 / 0.2e1 - b1 / 0.2e1) + v11 * (v21 * b3 - b2) / 0.2e1) * aa3 + (v21 * b3 - b2) * u11 + b1 * v21 - b2 * u21) * aa3 ^ 2) * aa1 - (((b3 * u21 - b1) * u11 - v11 * (v21 * b3 - b2)) * aa2 + aa3 * ((b1 * v21 - b2 * u21) * u11 - v21 * b3 + b2)) * (aa2 ^ 2 + aa3 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((v11 * (v21 * b3 - b2) + (-b3 * u21 + b1) * u11) * aa2 - aa3 * ((b1 * v21 - b2 * u21) * u11 - v21 * b3 + b2)) * aa1 ^ 2 + (((-0.2e1 * v21 * b3 + 0.2e1 * b2) * u11 + 0.2e1 * v11 * (-b3 * u21 + b1)) * aa2 ^ 2 - 0.2e1 * aa3 * (b1 * v21 * v11 - b2 * u21 * v11 + b3 * u21 - b1) * aa2 - 0.2e1 * aa3 ^ 2 * ((v21 * b3 - b2) * u11 + b1 * v21 - b2 * u21)) * aa1 + (((b3 * u21 - b1) * u11 - v11 * (v21 * b3 - b2)) * aa2 + aa3 * ((b1 * v21 - b2 * u21) * u11 - v21 * b3 + b2)) * (aa2 ^ 2 + aa3 ^ 2)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) -(-((-b2 * u21 + b1 * v21 - (v21 * b3 - b2) * u11) * aa2 ^ 3 + ((v11 * (v21 * b3 - b2) + (-b3 * u21 + b1) * u11) * aa1 - aa3 * ((b1 * v21 - b2 * u21) * v11 + b3 * u21 - b1)) * aa2 ^ 2 + (((b3 * u21 - b1) * v11 + b1 * v21 - b2 * u21) * aa1 ^ 2 + ((-b1 * v21 * u11 + b2 * u11 * u21 + v21 * b3 - b2) * aa3 + (b1 * v21 - b2 * u21) * v11 - b3 * u21 + b1) * aa1 - (((v21 * b3 - b2) * u11 + v11 * (-b3 * u21 + b1)) * aa3 + (-v21 * b3 + b2) * v11 + (-b3 * u21 + b1) * u11) * aa3) * aa2 + (aa1 ^ 2 + aa3 ^ 2) * (b1 * v21 * u11 - b2 * u11 * u21 + v21 * b3 - b2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((-b1 * v21 * u11 + b2 * u11 * u21 - v21 * b3 + b2) * aa2 ^ 4 + (((b1 * v21 - b2 * u21) * v11 - b3 * u21 + b1) * aa1 - aa3 * ((-v21 * b3 + b2) * v11 + (-b3 * u21 + b1) * u11)) * aa2 ^ 3 + ((-b1 * v21 * u11 + b2 * u11 * u21 - v21 * b3 + b2) * aa1 ^ 2 + ((-v21 * b3 + b2) * v11 - (-b3 * u21 + b1) * u11) * aa1 - aa3 * ((b1 * v21 * u11 - b2 * u11 * u21 + v21 * b3 - b2) * aa3 + (-b1 * v21 + b2 * u21) * v11 - b3 * u21 + b1)) * aa2 ^ 2 + (((b1 * v21 - b2 * u21) * v11 - b3 * u21 + b1) * aa1 ^ 3 + ((-(-b3 * u21 + b1) * u11 + v11 * (v21 * b3 - b2)) * aa3 + (-0.2e1 * b3 * u21 + 0.2e1 * b1) * v11 - 0.2e1 * (v21 * b3 - b2) * u11) * aa1 ^ 2 + aa3 * (((b1 * v21 - b2 * u21) * v11 - b3 * u21 + b1) * aa3 + 0.2e1 * b1 * v21 * u11 - 0.2e1 * b2 * u11 * u21 - 0.2e1 * v21 * b3 + 0.2e1 * b2) * aa1 + 0.2e1 * (((v21 * b3 / 0.2e1 - b2 / 0.2e1) * v11 - (-b3 * u21 + b1) * u11 / 0.2e1) * aa3 + v11 * (-b3 * u21 + b1) + b1 * v21 - b2 * u21) * aa3 ^ 2) * aa2 - (aa1 ^ 2 + aa3 ^ 2) * (((-v21 * b3 + b2) * v11 - (-b3 * u21 + b1) * u11) * aa1 + aa3 * ((b1 * v21 - b2 * u21) * v11 + b3 * u21 - b1))) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((v11 * (v21 * b3 - b2) + (-b3 * u21 + b1) * u11) * aa1 - aa3 * ((b1 * v21 - b2 * u21) * v11 + b3 * u21 - b1)) * aa2 ^ 2 + (((0.2e1 * b3 * u21 - 0.2e1 * b1) * v11 + 0.2e1 * (v21 * b3 - b2) * u11) * aa1 ^ 2 - 0.2e1 * aa3 * (b1 * v21 * u11 - b2 * u11 * u21 - v21 * b3 + b2) * aa1 - 0.2e1 * aa3 ^ 2 * (v11 * (-b3 * u21 + b1) + b1 * v21 - b2 * u21)) * aa2 + (aa1 ^ 2 + aa3 ^ 2) * (((-v21 * b3 + b2) * v11 - (-b3 * u21 + b1) * u11) * aa1 + aa3 * ((b1 * v21 - b2 * u21) * v11 + b3 * u21 - b1))) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) -(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * (-((-b3 * u11 * v21 + b3 * u21 * v11 - b1 * v11 + b2 * u11) * aa3 ^ 3 + ((b2 * u11 * u21 + (-b1 * u11 + b3) * v21 - b2) * aa1 - ((-b2 * v11 + b3) * u21 + b1 * (v11 * v21 - 0.1e1)) * aa2) * aa3 ^ 2 + (((b3 * v11 - b2) * u21 + b1 * (v21 - v11)) * aa1 ^ 2 + ((-b3 * u11 * u21 + v21 * b3 * v11 + b1 * u11 - b2 * v11) * aa2 + (-b2 * v11 - b3) * u21 + b1 * (v11 * v21 + 0.1e1)) * aa1 + aa2 * ((-b2 * u21 + (-b3 * u11 + b1) * v21 + b2 * u11) * aa2 + b2 * u11 * u21 + (-b1 * u11 - b3) * v21 + b2)) * aa3 + (aa1 ^ 2 + aa2 ^ 2) * (-b3 * u11 * u21 - v21 * b3 * v11 + b1 * u11 + b2 * v11)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((b3 * u11 * u21 + v21 * b3 * v11 - b1 * u11 - b2 * v11) * aa3 ^ 4 + (((-b2 * v11 - b3) * u21 + b1 * (v11 * v21 + 0.1e1)) * aa1 - aa2 * (-b2 * u11 * u21 + (b1 * u11 + b3) * v21 - b2)) * aa3 ^ 3 + ((b3 * u11 * u21 + v21 * b3 * v11 - b1 * u11 - b2 * v11) * aa1 ^ 2 + (-b2 * u11 * u21 + (b1 * u11 - b3) * v21 + b2) * aa1 + aa2 * ((b3 * u11 * u21 + v21 * b3 * v11 - b1 * u11 - b2 * v11) * aa2 + (-b2 * v11 + b3) * u21 + b1 * (v11 * v21 - 0.1e1))) * aa3 ^ 2 + (((-b2 * v11 - b3) * u21 + b1 * (v11 * v21 + 0.1e1)) * aa1 ^ 3 + ((b2 * u11 * u21 + (-b1 * u11 - b3) * v21 + b2) * aa2 + 0.2e1 * b2 * u21 + (-0.2e1 * b3 * u11 - 0.2e1 * b1) * v21 + 0.2e1 * b2 * u11) * aa1 ^ 2 + aa2 * (((-b2 * v11 - b3) * u21 + b1 * (v11 * v21 + 0.1e1)) * aa2 - 0.2e1 * v21 * b3 * v11 + 0.2e1 * b3 * u11 * u21 - 0.2e1 * b1 * u11 + 0.2e1 * b2 * v11) * aa1 - aa2 ^ 2 * (aa2 * (-b2 * u11 * u21 + (b1 * u11 + b3) * v21 - b2) + (-0.2e1 * b3 * v11 - 0.2e1 * b2) * u21 + 0.2e1 * b1 * (v21 + v11))) * aa3 - ((-b2 * u11 * u21 + (b1 * u11 - b3) * v21 + b2) * aa1 + ((-b2 * v11 + b3) * u21 + b1 * (v11 * v21 - 0.1e1)) * aa2) * (aa1 ^ 2 + aa2 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((b2 * u11 * u21 + (-b1 * u11 + b3) * v21 - b2) * aa1 - ((-b2 * v11 + b3) * u21 + b1 * (v11 * v21 - 0.1e1)) * aa2) * aa3 ^ 2 + ((-0.2e1 * b2 * u21 + (0.2e1 * b3 * u11 + 0.2e1 * b1) * v21 - 0.2e1 * b2 * u11) * aa1 ^ 2 + 0.2e1 * (-b3 * u11 * u21 + v21 * b3 * v11 + b1 * u11 - b2 * v11) * aa2 * aa1 + 0.2e1 * aa2 ^ 2 * ((-b3 * v11 - b2) * u21 + b1 * (v21 + v11))) * aa3 + ((-b2 * u11 * u21 + (b1 * u11 - b3) * v21 + b2) * aa1 + ((-b2 * v11 + b3) * u21 + b1 * (v11 * v21 - 0.1e1)) * aa2) * (aa1 ^ 2 + aa2 ^ 2)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)); ((-v22 * aa2 ^ 2 + (aa3 * v12 * v22 - aa1 * u12 - aa3) * aa2 + v12 * aa3 ^ 2 + aa1 * aa3 * u12 * v22 + (-v22 + v12) * aa1 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (aa1 * v12 * v22 - v22 * u12 * aa2 - aa3 * u12 + aa1) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (-aa3 * v22 + aa2) * (aa1 * u12 + aa2 * v12 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((u22 * aa1 ^ 2 + (-aa3 * u12 * u22 + aa2 * v12 + aa3) * aa1 - u12 * aa3 ^ 2 - aa3 * v12 * u22 * aa2 - aa2 ^ 2 * (u12 - u22)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (v12 * u22 * aa1 - aa2 * u12 * u22 + aa3 * v12 - aa2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-aa3 * u22 + aa1) * (aa1 * u12 + aa2 * v12 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((-v12 * u22 * aa1 ^ 2 + ((u12 * u22 - v12 * v22) * aa2 - aa3 * v22) * aa1 + v22 * u12 * aa2 ^ 2 + aa3 * u22 * aa2 + (u12 * v22 - u22 * v12) * aa3 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (u22 * aa1 + v22 * aa2 - aa3 * (u12 * u22 + v12 * v22)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (aa1 * v22 - aa2 * u22) * (aa1 * u12 + aa2 * v12 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) -(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * (-((b1 * v22 - b2 * u22 - v12 * (-b3 * u22 + b1)) * aa1 ^ 3 + ((v12 * (v22 * b3 - b2) + (-b3 * u22 + b1) * u12) * aa2 - aa3 * ((b1 * v22 - b2 * u22) * u12 - v22 * b3 + b2)) * aa1 ^ 2 + (((-v22 * b3 + b2) * u12 + b1 * v22 - b2 * u22) * aa2 ^ 2 + ((-b1 * v22 * v12 + b2 * u22 * v12 - b3 * u22 + b1) * aa3 + (-b1 * v22 + b2 * u22) * u12 - v22 * b3 + b2) * aa2 - (((v22 * b3 - b2) * u12 + v12 * (-b3 * u22 + b1)) * aa3 + (-b3 * u22 + b1) * u12 - v12 * (v22 * b3 - b2)) * aa3) * aa1 - (aa2 ^ 2 + aa3 ^ 2) * (b1 * v22 * v12 - b2 * u22 * v12 - b3 * u22 + b1)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((b1 * v22 * v12 - b2 * u22 * v12 - b3 * u22 + b1) * aa1 ^ 4 + (((-b1 * v22 + b2 * u22) * u12 - v22 * b3 + b2) * aa2 - aa3 * ((-b3 * u22 + b1) * u12 - v12 * (v22 * b3 - b2))) * aa1 ^ 3 + ((b1 * v22 * v12 - b2 * u22 * v12 - b3 * u22 + b1) * aa2 ^ 2 + ((b3 * u22 - b1) * u12 - v12 * (v22 * b3 - b2)) * aa2 + aa3 * ((b1 * v22 * v12 - b2 * u22 * v12 - b3 * u22 + b1) * aa3 + (b1 * v22 - b2 * u22) * u12 - v22 * b3 + b2)) * aa1 ^ 2 + (((-b1 * v22 + b2 * u22) * u12 - v22 * b3 + b2) * aa2 ^ 3 + (((b3 * u22 - b1) * u12 + v12 * (v22 * b3 - b2)) * aa3 + (0.2e1 * v22 * b3 - 0.2e1 * b2) * u12 - 0.2e1 * v12 * (-b3 * u22 + b1)) * aa2 ^ 2 - (((b1 * v22 - b2 * u22) * u12 + v22 * b3 - b2) * aa3 - 0.2e1 * b1 * v22 * v12 + 0.2e1 * b2 * u22 * v12 - 0.2e1 * b3 * u22 + 0.2e1 * b1) * aa3 * aa2 + 0.2e1 * ((u12 * (b3 * u22 / 0.2e1 - b1 / 0.2e1) + v12 * (v22 * b3 - b2) / 0.2e1) * aa3 + (v22 * b3 - b2) * u12 + b1 * v22 - b2 * u22) * aa3 ^ 2) * aa1 - (((b3 * u22 - b1) * u12 - v12 * (v22 * b3 - b2)) * aa2 + aa3 * ((b1 * v22 - b2 * u22) * u12 - v22 * b3 + b2)) * (aa2 ^ 2 + aa3 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((v12 * (v22 * b3 - b2) + (-b3 * u22 + b1) * u12) * aa2 - aa3 * ((b1 * v22 - b2 * u22) * u12 - v22 * b3 + b2)) * aa1 ^ 2 + (((-0.2e1 * v22 * b3 + 0.2e1 * b2) * u12 + 0.2e1 * v12 * (-b3 * u22 + b1)) * aa2 ^ 2 - 0.2e1 * aa3 * (b1 * v22 * v12 - b2 * u22 * v12 + b3 * u22 - b1) * aa2 - 0.2e1 * aa3 ^ 2 * ((v22 * b3 - b2) * u12 + b1 * v22 - b2 * u22)) * aa1 + (((b3 * u22 - b1) * u12 - v12 * (v22 * b3 - b2)) * aa2 + aa3 * ((b1 * v22 - b2 * u22) * u12 - v22 * b3 + b2)) * (aa2 ^ 2 + aa3 ^ 2)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) -(-((-b2 * u22 + b1 * v22 - (v22 * b3 - b2) * u12) * aa2 ^ 3 + ((v12 * (v22 * b3 - b2) + (-b3 * u22 + b1) * u12) * aa1 - aa3 * ((b1 * v22 - b2 * u22) * v12 + b3 * u22 - b1)) * aa2 ^ 2 + (((b3 * u22 - b1) * v12 + b1 * v22 - b2 * u22) * aa1 ^ 2 + ((-b1 * v22 * u12 + b2 * u12 * u22 + v22 * b3 - b2) * aa3 + (b1 * v22 - b2 * u22) * v12 - b3 * u22 + b1) * aa1 - (((v22 * b3 - b2) * u12 + v12 * (-b3 * u22 + b1)) * aa3 + (-v22 * b3 + b2) * v12 + (-b3 * u22 + b1) * u12) * aa3) * aa2 + (aa1 ^ 2 + aa3 ^ 2) * (b1 * v22 * u12 - b2 * u12 * u22 + v22 * b3 - b2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((-b1 * v22 * u12 + b2 * u12 * u22 - v22 * b3 + b2) * aa2 ^ 4 + (((b1 * v22 - b2 * u22) * v12 - b3 * u22 + b1) * aa1 - aa3 * ((-v22 * b3 + b2) * v12 + (-b3 * u22 + b1) * u12)) * aa2 ^ 3 + ((-b1 * v22 * u12 + b2 * u12 * u22 - v22 * b3 + b2) * aa1 ^ 2 + ((-v22 * b3 + b2) * v12 - (-b3 * u22 + b1) * u12) * aa1 - aa3 * ((b1 * v22 * u12 - b2 * u12 * u22 + v22 * b3 - b2) * aa3 + (-b1 * v22 + b2 * u22) * v12 - b3 * u22 + b1)) * aa2 ^ 2 + (((b1 * v22 - b2 * u22) * v12 - b3 * u22 + b1) * aa1 ^ 3 + ((-(-b3 * u22 + b1) * u12 + v12 * (v22 * b3 - b2)) * aa3 + (-0.2e1 * b3 * u22 + 0.2e1 * b1) * v12 - 0.2e1 * (v22 * b3 - b2) * u12) * aa1 ^ 2 + aa3 * (((b1 * v22 - b2 * u22) * v12 - b3 * u22 + b1) * aa3 + 0.2e1 * b1 * v22 * u12 - 0.2e1 * b2 * u12 * u22 - 0.2e1 * v22 * b3 + 0.2e1 * b2) * aa1 + 0.2e1 * (((v22 * b3 / 0.2e1 - b2 / 0.2e1) * v12 - (-b3 * u22 + b1) * u12 / 0.2e1) * aa3 + v12 * (-b3 * u22 + b1) + b1 * v22 - b2 * u22) * aa3 ^ 2) * aa2 - (aa1 ^ 2 + aa3 ^ 2) * (((-v22 * b3 + b2) * v12 - (-b3 * u22 + b1) * u12) * aa1 + aa3 * ((b1 * v22 - b2 * u22) * v12 + b3 * u22 - b1))) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((v12 * (v22 * b3 - b2) + (-b3 * u22 + b1) * u12) * aa1 - aa3 * ((b1 * v22 - b2 * u22) * v12 + b3 * u22 - b1)) * aa2 ^ 2 + (((0.2e1 * b3 * u22 - 0.2e1 * b1) * v12 + 0.2e1 * (v22 * b3 - b2) * u12) * aa1 ^ 2 - 0.2e1 * aa3 * (b1 * v22 * u12 - b2 * u12 * u22 - v22 * b3 + b2) * aa1 - 0.2e1 * aa3 ^ 2 * (v12 * (-b3 * u22 + b1) + b1 * v22 - b2 * u22)) * aa2 + (aa1 ^ 2 + aa3 ^ 2) * (((-v22 * b3 + b2) * v12 - (-b3 * u22 + b1) * u12) * aa1 + aa3 * ((b1 * v22 - b2 * u22) * v12 + b3 * u22 - b1))) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) -(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * (-((-b3 * u12 * v22 + b3 * u22 * v12 - b1 * v12 + b2 * u12) * aa3 ^ 3 + ((b2 * u12 * u22 + (-b1 * u12 + b3) * v22 - b2) * aa1 - ((-b2 * v12 + b3) * u22 + b1 * (v12 * v22 - 0.1e1)) * aa2) * aa3 ^ 2 + (((b3 * v12 - b2) * u22 + b1 * (v22 - v12)) * aa1 ^ 2 + ((-b3 * u12 * u22 + v22 * b3 * v12 + b1 * u12 - b2 * v12) * aa2 + (-b2 * v12 - b3) * u22 + b1 * (v12 * v22 + 0.1e1)) * aa1 + aa2 * ((-b2 * u22 + (-b3 * u12 + b1) * v22 + b2 * u12) * aa2 + b2 * u12 * u22 + (-b1 * u12 - b3) * v22 + b2)) * aa3 + (aa1 ^ 2 + aa2 ^ 2) * (-b3 * u12 * u22 - v22 * b3 * v12 + b1 * u12 + b2 * v12)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((b3 * u12 * u22 + v22 * b3 * v12 - b1 * u12 - b2 * v12) * aa3 ^ 4 + (((-b2 * v12 - b3) * u22 + b1 * (v12 * v22 + 0.1e1)) * aa1 - aa2 * (-b2 * u12 * u22 + (b1 * u12 + b3) * v22 - b2)) * aa3 ^ 3 + ((b3 * u12 * u22 + v22 * b3 * v12 - b1 * u12 - b2 * v12) * aa1 ^ 2 + (-b2 * u12 * u22 + (b1 * u12 - b3) * v22 + b2) * aa1 + aa2 * ((b3 * u12 * u22 + v22 * b3 * v12 - b1 * u12 - b2 * v12) * aa2 + (-b2 * v12 + b3) * u22 + b1 * (v12 * v22 - 0.1e1))) * aa3 ^ 2 + (((-b2 * v12 - b3) * u22 + b1 * (v12 * v22 + 0.1e1)) * aa1 ^ 3 + ((b2 * u12 * u22 + (-b1 * u12 - b3) * v22 + b2) * aa2 + 0.2e1 * b2 * u22 + (-0.2e1 * b3 * u12 - 0.2e1 * b1) * v22 + 0.2e1 * b2 * u12) * aa1 ^ 2 + aa2 * (((-b2 * v12 - b3) * u22 + b1 * (v12 * v22 + 0.1e1)) * aa2 - 0.2e1 * v22 * b3 * v12 + 0.2e1 * b3 * u12 * u22 - 0.2e1 * b1 * u12 + 0.2e1 * b2 * v12) * aa1 - aa2 ^ 2 * (aa2 * (-b2 * u12 * u22 + (b1 * u12 + b3) * v22 - b2) + (-0.2e1 * b3 * v12 - 0.2e1 * b2) * u22 + 0.2e1 * b1 * (v22 + v12))) * aa3 - ((-b2 * u12 * u22 + (b1 * u12 - b3) * v22 + b2) * aa1 + ((-b2 * v12 + b3) * u22 + b1 * (v12 * v22 - 0.1e1)) * aa2) * (aa1 ^ 2 + aa2 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((b2 * u12 * u22 + (-b1 * u12 + b3) * v22 - b2) * aa1 - ((-b2 * v12 + b3) * u22 + b1 * (v12 * v22 - 0.1e1)) * aa2) * aa3 ^ 2 + ((-0.2e1 * b2 * u22 + (0.2e1 * b3 * u12 + 0.2e1 * b1) * v22 - 0.2e1 * b2 * u12) * aa1 ^ 2 + 0.2e1 * (-b3 * u12 * u22 + v22 * b3 * v12 + b1 * u12 - b2 * v12) * aa2 * aa1 + 0.2e1 * aa2 ^ 2 * ((-b3 * v12 - b2) * u22 + b1 * (v22 + v12))) * aa3 + ((-b2 * u12 * u22 + (b1 * u12 - b3) * v22 + b2) * aa1 + ((-b2 * v12 + b3) * u22 + b1 * (v12 * v22 - 0.1e1)) * aa2) * (aa1 ^ 2 + aa2 ^ 2)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)); ((-v23 * aa2 ^ 2 + (aa3 * v13 * v23 - aa1 * u13 - aa3) * aa2 + v13 * aa3 ^ 2 + aa1 * aa3 * u13 * v23 + (-v23 + v13) * aa1 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (aa1 * v13 * v23 - v23 * u13 * aa2 - aa3 * u13 + aa1) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (-aa3 * v23 + aa2) * (aa1 * u13 + aa2 * v13 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((u23 * aa1 ^ 2 + (-aa3 * u13 * u23 + aa2 * v13 + aa3) * aa1 - u13 * aa3 ^ 2 - aa3 * v13 * u23 * aa2 - aa2 ^ 2 * (u13 - u23)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (v13 * u23 * aa1 - aa2 * u13 * u23 + aa3 * v13 - aa2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-aa3 * u23 + aa1) * (aa1 * u13 + aa2 * v13 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((-v13 * u23 * aa1 ^ 2 + ((u13 * u23 - v13 * v23) * aa2 - aa3 * v23) * aa1 + v23 * u13 * aa2 ^ 2 + aa3 * u23 * aa2 + (u13 * v23 - u23 * v13) * aa3 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (u23 * aa1 + v23 * aa2 - aa3 * (u13 * u23 + v13 * v23)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (aa1 * v23 - aa2 * u23) * (aa1 * u13 + aa2 * v13 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) -(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * (-((b1 * v23 - b2 * u23 - v13 * (-b3 * u23 + b1)) * aa1 ^ 3 + ((v13 * (v23 * b3 - b2) + (-b3 * u23 + b1) * u13) * aa2 - aa3 * ((b1 * v23 - b2 * u23) * u13 - v23 * b3 + b2)) * aa1 ^ 2 + (((-v23 * b3 + b2) * u13 + b1 * v23 - b2 * u23) * aa2 ^ 2 + ((-b1 * v23 * v13 + b2 * u23 * v13 - b3 * u23 + b1) * aa3 + (-b1 * v23 + b2 * u23) * u13 - v23 * b3 + b2) * aa2 - (((v23 * b3 - b2) * u13 + v13 * (-b3 * u23 + b1)) * aa3 + (-b3 * u23 + b1) * u13 - v13 * (v23 * b3 - b2)) * aa3) * aa1 - (aa2 ^ 2 + aa3 ^ 2) * (b1 * v23 * v13 - b2 * u23 * v13 - b3 * u23 + b1)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((b1 * v23 * v13 - b2 * u23 * v13 - b3 * u23 + b1) * aa1 ^ 4 + (((-b1 * v23 + b2 * u23) * u13 - v23 * b3 + b2) * aa2 - aa3 * ((-b3 * u23 + b1) * u13 - v13 * (v23 * b3 - b2))) * aa1 ^ 3 + ((b1 * v23 * v13 - b2 * u23 * v13 - b3 * u23 + b1) * aa2 ^ 2 + ((b3 * u23 - b1) * u13 - v13 * (v23 * b3 - b2)) * aa2 + aa3 * ((b1 * v23 * v13 - b2 * u23 * v13 - b3 * u23 + b1) * aa3 + (b1 * v23 - b2 * u23) * u13 - v23 * b3 + b2)) * aa1 ^ 2 + (((-b1 * v23 + b2 * u23) * u13 - v23 * b3 + b2) * aa2 ^ 3 + (((b3 * u23 - b1) * u13 + v13 * (v23 * b3 - b2)) * aa3 + (0.2e1 * v23 * b3 - 0.2e1 * b2) * u13 - 0.2e1 * v13 * (-b3 * u23 + b1)) * aa2 ^ 2 - (((b1 * v23 - b2 * u23) * u13 + v23 * b3 - b2) * aa3 - 0.2e1 * b1 * v23 * v13 + 0.2e1 * b2 * u23 * v13 - 0.2e1 * b3 * u23 + 0.2e1 * b1) * aa3 * aa2 + 0.2e1 * ((u13 * (b3 * u23 / 0.2e1 - b1 / 0.2e1) + v13 * (v23 * b3 - b2) / 0.2e1) * aa3 + (v23 * b3 - b2) * u13 + b1 * v23 - b2 * u23) * aa3 ^ 2) * aa1 - (((b3 * u23 - b1) * u13 - v13 * (v23 * b3 - b2)) * aa2 + aa3 * ((b1 * v23 - b2 * u23) * u13 - v23 * b3 + b2)) * (aa2 ^ 2 + aa3 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((v13 * (v23 * b3 - b2) + (-b3 * u23 + b1) * u13) * aa2 - aa3 * ((b1 * v23 - b2 * u23) * u13 - v23 * b3 + b2)) * aa1 ^ 2 + (((-0.2e1 * v23 * b3 + 0.2e1 * b2) * u13 + 0.2e1 * v13 * (-b3 * u23 + b1)) * aa2 ^ 2 - 0.2e1 * aa3 * (b1 * v23 * v13 - b2 * u23 * v13 + b3 * u23 - b1) * aa2 - 0.2e1 * aa3 ^ 2 * ((v23 * b3 - b2) * u13 + b1 * v23 - b2 * u23)) * aa1 + (((b3 * u23 - b1) * u13 - v13 * (v23 * b3 - b2)) * aa2 + aa3 * ((b1 * v23 - b2 * u23) * u13 - v23 * b3 + b2)) * (aa2 ^ 2 + aa3 ^ 2)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) -(-((-b2 * u23 + b1 * v23 - (v23 * b3 - b2) * u13) * aa2 ^ 3 + ((v13 * (v23 * b3 - b2) + (-b3 * u23 + b1) * u13) * aa1 - aa3 * ((b1 * v23 - b2 * u23) * v13 + b3 * u23 - b1)) * aa2 ^ 2 + (((b3 * u23 - b1) * v13 + b1 * v23 - b2 * u23) * aa1 ^ 2 + ((-b1 * v23 * u13 + b2 * u13 * u23 + v23 * b3 - b2) * aa3 + (b1 * v23 - b2 * u23) * v13 - b3 * u23 + b1) * aa1 - (((v23 * b3 - b2) * u13 + v13 * (-b3 * u23 + b1)) * aa3 + (-v23 * b3 + b2) * v13 + (-b3 * u23 + b1) * u13) * aa3) * aa2 + (aa1 ^ 2 + aa3 ^ 2) * (b1 * v23 * u13 - b2 * u13 * u23 + v23 * b3 - b2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((-b1 * v23 * u13 + b2 * u13 * u23 - v23 * b3 + b2) * aa2 ^ 4 + (((b1 * v23 - b2 * u23) * v13 - b3 * u23 + b1) * aa1 - aa3 * ((-v23 * b3 + b2) * v13 + (-b3 * u23 + b1) * u13)) * aa2 ^ 3 + ((-b1 * v23 * u13 + b2 * u13 * u23 - v23 * b3 + b2) * aa1 ^ 2 + ((-v23 * b3 + b2) * v13 - (-b3 * u23 + b1) * u13) * aa1 - aa3 * ((b1 * v23 * u13 - b2 * u13 * u23 + v23 * b3 - b2) * aa3 + (-b1 * v23 + b2 * u23) * v13 - b3 * u23 + b1)) * aa2 ^ 2 + (((b1 * v23 - b2 * u23) * v13 - b3 * u23 + b1) * aa1 ^ 3 + ((-(-b3 * u23 + b1) * u13 + v13 * (v23 * b3 - b2)) * aa3 + (-0.2e1 * b3 * u23 + 0.2e1 * b1) * v13 - 0.2e1 * (v23 * b3 - b2) * u13) * aa1 ^ 2 + aa3 * (((b1 * v23 - b2 * u23) * v13 - b3 * u23 + b1) * aa3 + 0.2e1 * b1 * v23 * u13 - 0.2e1 * b2 * u13 * u23 - 0.2e1 * v23 * b3 + 0.2e1 * b2) * aa1 + 0.2e1 * (((v23 * b3 / 0.2e1 - b2 / 0.2e1) * v13 - (-b3 * u23 + b1) * u13 / 0.2e1) * aa3 + v13 * (-b3 * u23 + b1) + b1 * v23 - b2 * u23) * aa3 ^ 2) * aa2 - (aa1 ^ 2 + aa3 ^ 2) * (((-v23 * b3 + b2) * v13 - (-b3 * u23 + b1) * u13) * aa1 + aa3 * ((b1 * v23 - b2 * u23) * v13 + b3 * u23 - b1))) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((v13 * (v23 * b3 - b2) + (-b3 * u23 + b1) * u13) * aa1 - aa3 * ((b1 * v23 - b2 * u23) * v13 + b3 * u23 - b1)) * aa2 ^ 2 + (((0.2e1 * b3 * u23 - 0.2e1 * b1) * v13 + 0.2e1 * (v23 * b3 - b2) * u13) * aa1 ^ 2 - 0.2e1 * aa3 * (b1 * v23 * u13 - b2 * u13 * u23 - v23 * b3 + b2) * aa1 - 0.2e1 * aa3 ^ 2 * (v13 * (-b3 * u23 + b1) + b1 * v23 - b2 * u23)) * aa2 + (aa1 ^ 2 + aa3 ^ 2) * (((-v23 * b3 + b2) * v13 - (-b3 * u23 + b1) * u13) * aa1 + aa3 * ((b1 * v23 - b2 * u23) * v13 + b3 * u23 - b1))) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) -(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * (-((-b3 * u13 * v23 + b3 * u23 * v13 - b1 * v13 + b2 * u13) * aa3 ^ 3 + ((b2 * u13 * u23 + (-b1 * u13 + b3) * v23 - b2) * aa1 - ((-b2 * v13 + b3) * u23 + b1 * (v13 * v23 - 0.1e1)) * aa2) * aa3 ^ 2 + (((b3 * v13 - b2) * u23 + b1 * (v23 - v13)) * aa1 ^ 2 + ((-b3 * u13 * u23 + v23 * b3 * v13 + b1 * u13 - b2 * v13) * aa2 + (-b2 * v13 - b3) * u23 + b1 * (v13 * v23 + 0.1e1)) * aa1 + aa2 * ((-b2 * u23 + (-b3 * u13 + b1) * v23 + b2 * u13) * aa2 + b2 * u13 * u23 + (-b1 * u13 - b3) * v23 + b2)) * aa3 + (aa1 ^ 2 + aa2 ^ 2) * (-b3 * u13 * u23 - v23 * b3 * v13 + b1 * u13 + b2 * v13)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((b3 * u13 * u23 + v23 * b3 * v13 - b1 * u13 - b2 * v13) * aa3 ^ 4 + (((-b2 * v13 - b3) * u23 + b1 * (v13 * v23 + 0.1e1)) * aa1 - aa2 * (-b2 * u13 * u23 + (b1 * u13 + b3) * v23 - b2)) * aa3 ^ 3 + ((b3 * u13 * u23 + v23 * b3 * v13 - b1 * u13 - b2 * v13) * aa1 ^ 2 + (-b2 * u13 * u23 + (b1 * u13 - b3) * v23 + b2) * aa1 + aa2 * ((b3 * u13 * u23 + v23 * b3 * v13 - b1 * u13 - b2 * v13) * aa2 + (-b2 * v13 + b3) * u23 + b1 * (v13 * v23 - 0.1e1))) * aa3 ^ 2 + (((-b2 * v13 - b3) * u23 + b1 * (v13 * v23 + 0.1e1)) * aa1 ^ 3 + ((b2 * u13 * u23 + (-b1 * u13 - b3) * v23 + b2) * aa2 + 0.2e1 * b2 * u23 + (-0.2e1 * b3 * u13 - 0.2e1 * b1) * v23 + 0.2e1 * b2 * u13) * aa1 ^ 2 + aa2 * (((-b2 * v13 - b3) * u23 + b1 * (v13 * v23 + 0.1e1)) * aa2 - 0.2e1 * v23 * b3 * v13 + 0.2e1 * b3 * u13 * u23 - 0.2e1 * b1 * u13 + 0.2e1 * b2 * v13) * aa1 - aa2 ^ 2 * (aa2 * (-b2 * u13 * u23 + (b1 * u13 + b3) * v23 - b2) + (-0.2e1 * b3 * v13 - 0.2e1 * b2) * u23 + 0.2e1 * b1 * (v23 + v13))) * aa3 - ((-b2 * u13 * u23 + (b1 * u13 - b3) * v23 + b2) * aa1 + ((-b2 * v13 + b3) * u23 + b1 * (v13 * v23 - 0.1e1)) * aa2) * (aa1 ^ 2 + aa2 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((b2 * u13 * u23 + (-b1 * u13 + b3) * v23 - b2) * aa1 - ((-b2 * v13 + b3) * u23 + b1 * (v13 * v23 - 0.1e1)) * aa2) * aa3 ^ 2 + ((-0.2e1 * b2 * u23 + (0.2e1 * b3 * u13 + 0.2e1 * b1) * v23 - 0.2e1 * b2 * u13) * aa1 ^ 2 + 0.2e1 * (-b3 * u13 * u23 + v23 * b3 * v13 + b1 * u13 - b2 * v13) * aa2 * aa1 + 0.2e1 * aa2 ^ 2 * ((-b3 * v13 - b2) * u23 + b1 * (v23 + v13))) * aa3 + ((-b2 * u13 * u23 + (b1 * u13 - b3) * v23 + b2) * aa1 + ((-b2 * v13 + b3) * u23 + b1 * (v13 * v23 - 0.1e1)) * aa2) * (aa1 ^ 2 + aa2 ^ 2)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)); ((-v24 * aa2 ^ 2 + (aa3 * v14 * v24 - aa1 * u14 - aa3) * aa2 + v14 * aa3 ^ 2 + aa1 * aa3 * u14 * v24 + (-v24 + v14) * aa1 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (aa1 * v14 * v24 - v24 * u14 * aa2 - aa3 * u14 + aa1) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (-aa3 * v24 + aa2) * (aa1 * u14 + aa2 * v14 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((u24 * aa1 ^ 2 + (-aa3 * u14 * u24 + aa2 * v14 + aa3) * aa1 - u14 * aa3 ^ 2 - aa3 * v14 * u24 * aa2 - aa2 ^ 2 * (u14 - u24)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (v14 * u24 * aa1 - aa2 * u14 * u24 + aa3 * v14 - aa2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-aa3 * u24 + aa1) * (aa1 * u14 + aa2 * v14 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((-v14 * u24 * aa1 ^ 2 + ((u14 * u24 - v14 * v24) * aa2 - aa3 * v24) * aa1 + v24 * u14 * aa2 ^ 2 + aa3 * u24 * aa2 + (u14 * v24 - u24 * v14) * aa3 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (u24 * aa1 + v24 * aa2 - aa3 * (u14 * u24 + v14 * v24)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (aa1 * v24 - aa2 * u24) * (aa1 * u14 + aa2 * v14 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) -(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * (-((b1 * v24 - b2 * u24 - v14 * (-b3 * u24 + b1)) * aa1 ^ 3 + ((v14 * (v24 * b3 - b2) + (-b3 * u24 + b1) * u14) * aa2 - aa3 * ((b1 * v24 - b2 * u24) * u14 - v24 * b3 + b2)) * aa1 ^ 2 + (((-v24 * b3 + b2) * u14 + b1 * v24 - b2 * u24) * aa2 ^ 2 + ((-b1 * v24 * v14 + b2 * u24 * v14 - b3 * u24 + b1) * aa3 + (-b1 * v24 + b2 * u24) * u14 - v24 * b3 + b2) * aa2 - (((v24 * b3 - b2) * u14 + v14 * (-b3 * u24 + b1)) * aa3 + (-b3 * u24 + b1) * u14 - v14 * (v24 * b3 - b2)) * aa3) * aa1 - (aa2 ^ 2 + aa3 ^ 2) * (b1 * v24 * v14 - b2 * u24 * v14 - b3 * u24 + b1)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((b1 * v24 * v14 - b2 * u24 * v14 - b3 * u24 + b1) * aa1 ^ 4 + (((-b1 * v24 + b2 * u24) * u14 - v24 * b3 + b2) * aa2 - aa3 * ((-b3 * u24 + b1) * u14 - v14 * (v24 * b3 - b2))) * aa1 ^ 3 + ((b1 * v24 * v14 - b2 * u24 * v14 - b3 * u24 + b1) * aa2 ^ 2 + ((b3 * u24 - b1) * u14 - v14 * (v24 * b3 - b2)) * aa2 + aa3 * ((b1 * v24 * v14 - b2 * u24 * v14 - b3 * u24 + b1) * aa3 + (b1 * v24 - b2 * u24) * u14 - v24 * b3 + b2)) * aa1 ^ 2 + (((-b1 * v24 + b2 * u24) * u14 - v24 * b3 + b2) * aa2 ^ 3 + (((b3 * u24 - b1) * u14 + v14 * (v24 * b3 - b2)) * aa3 + (0.2e1 * v24 * b3 - 0.2e1 * b2) * u14 - 0.2e1 * v14 * (-b3 * u24 + b1)) * aa2 ^ 2 - (((b1 * v24 - b2 * u24) * u14 + v24 * b3 - b2) * aa3 - 0.2e1 * b1 * v24 * v14 + 0.2e1 * b2 * u24 * v14 - 0.2e1 * b3 * u24 + 0.2e1 * b1) * aa3 * aa2 + 0.2e1 * ((u14 * (b3 * u24 / 0.2e1 - b1 / 0.2e1) + v14 * (v24 * b3 - b2) / 0.2e1) * aa3 + (v24 * b3 - b2) * u14 + b1 * v24 - b2 * u24) * aa3 ^ 2) * aa1 - (((b3 * u24 - b1) * u14 - v14 * (v24 * b3 - b2)) * aa2 + aa3 * ((b1 * v24 - b2 * u24) * u14 - v24 * b3 + b2)) * (aa2 ^ 2 + aa3 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((v14 * (v24 * b3 - b2) + (-b3 * u24 + b1) * u14) * aa2 - aa3 * ((b1 * v24 - b2 * u24) * u14 - v24 * b3 + b2)) * aa1 ^ 2 + (((-0.2e1 * v24 * b3 + 0.2e1 * b2) * u14 + 0.2e1 * v14 * (-b3 * u24 + b1)) * aa2 ^ 2 - 0.2e1 * aa3 * (b1 * v24 * v14 - b2 * u24 * v14 + b3 * u24 - b1) * aa2 - 0.2e1 * aa3 ^ 2 * ((v24 * b3 - b2) * u14 + b1 * v24 - b2 * u24)) * aa1 + (((b3 * u24 - b1) * u14 - v14 * (v24 * b3 - b2)) * aa2 + aa3 * ((b1 * v24 - b2 * u24) * u14 - v24 * b3 + b2)) * (aa2 ^ 2 + aa3 ^ 2)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) -(-((-b2 * u24 + b1 * v24 - (v24 * b3 - b2) * u14) * aa2 ^ 3 + ((v14 * (v24 * b3 - b2) + (-b3 * u24 + b1) * u14) * aa1 - aa3 * ((b1 * v24 - b2 * u24) * v14 + b3 * u24 - b1)) * aa2 ^ 2 + (((b3 * u24 - b1) * v14 + b1 * v24 - b2 * u24) * aa1 ^ 2 + ((-b1 * v24 * u14 + b2 * u14 * u24 + v24 * b3 - b2) * aa3 + (b1 * v24 - b2 * u24) * v14 - b3 * u24 + b1) * aa1 - (((v24 * b3 - b2) * u14 + v14 * (-b3 * u24 + b1)) * aa3 + (-v24 * b3 + b2) * v14 + (-b3 * u24 + b1) * u14) * aa3) * aa2 + (aa1 ^ 2 + aa3 ^ 2) * (b1 * v24 * u14 - b2 * u14 * u24 + v24 * b3 - b2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((-b1 * v24 * u14 + b2 * u14 * u24 - v24 * b3 + b2) * aa2 ^ 4 + (((b1 * v24 - b2 * u24) * v14 - b3 * u24 + b1) * aa1 - aa3 * ((-v24 * b3 + b2) * v14 + (-b3 * u24 + b1) * u14)) * aa2 ^ 3 + ((-b1 * v24 * u14 + b2 * u14 * u24 - v24 * b3 + b2) * aa1 ^ 2 + ((-v24 * b3 + b2) * v14 - (-b3 * u24 + b1) * u14) * aa1 - aa3 * ((b1 * v24 * u14 - b2 * u14 * u24 + v24 * b3 - b2) * aa3 + (-b1 * v24 + b2 * u24) * v14 - b3 * u24 + b1)) * aa2 ^ 2 + (((b1 * v24 - b2 * u24) * v14 - b3 * u24 + b1) * aa1 ^ 3 + ((-(-b3 * u24 + b1) * u14 + v14 * (v24 * b3 - b2)) * aa3 + (-0.2e1 * b3 * u24 + 0.2e1 * b1) * v14 - 0.2e1 * (v24 * b3 - b2) * u14) * aa1 ^ 2 + aa3 * (((b1 * v24 - b2 * u24) * v14 - b3 * u24 + b1) * aa3 + 0.2e1 * b1 * v24 * u14 - 0.2e1 * b2 * u14 * u24 - 0.2e1 * v24 * b3 + 0.2e1 * b2) * aa1 + 0.2e1 * (((v24 * b3 / 0.2e1 - b2 / 0.2e1) * v14 - (-b3 * u24 + b1) * u14 / 0.2e1) * aa3 + v14 * (-b3 * u24 + b1) + b1 * v24 - b2 * u24) * aa3 ^ 2) * aa2 - (aa1 ^ 2 + aa3 ^ 2) * (((-v24 * b3 + b2) * v14 - (-b3 * u24 + b1) * u14) * aa1 + aa3 * ((b1 * v24 - b2 * u24) * v14 + b3 * u24 - b1))) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((v14 * (v24 * b3 - b2) + (-b3 * u24 + b1) * u14) * aa1 - aa3 * ((b1 * v24 - b2 * u24) * v14 + b3 * u24 - b1)) * aa2 ^ 2 + (((0.2e1 * b3 * u24 - 0.2e1 * b1) * v14 + 0.2e1 * (v24 * b3 - b2) * u14) * aa1 ^ 2 - 0.2e1 * aa3 * (b1 * v24 * u14 - b2 * u14 * u24 - v24 * b3 + b2) * aa1 - 0.2e1 * aa3 ^ 2 * (v14 * (-b3 * u24 + b1) + b1 * v24 - b2 * u24)) * aa2 + (aa1 ^ 2 + aa3 ^ 2) * (((-v24 * b3 + b2) * v14 - (-b3 * u24 + b1) * u14) * aa1 + aa3 * ((b1 * v24 - b2 * u24) * v14 + b3 * u24 - b1))) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) -(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * (-((-b3 * u14 * v24 + b3 * u24 * v14 - b1 * v14 + b2 * u14) * aa3 ^ 3 + ((b2 * u14 * u24 + (-b1 * u14 + b3) * v24 - b2) * aa1 - ((-b2 * v14 + b3) * u24 + b1 * (v14 * v24 - 0.1e1)) * aa2) * aa3 ^ 2 + (((b3 * v14 - b2) * u24 + b1 * (v24 - v14)) * aa1 ^ 2 + ((-b3 * u14 * u24 + v24 * b3 * v14 + b1 * u14 - b2 * v14) * aa2 + (-b2 * v14 - b3) * u24 + b1 * (v14 * v24 + 0.1e1)) * aa1 + aa2 * ((-b2 * u24 + (-b3 * u14 + b1) * v24 + b2 * u14) * aa2 + b2 * u14 * u24 + (-b1 * u14 - b3) * v24 + b2)) * aa3 + (aa1 ^ 2 + aa2 ^ 2) * (-b3 * u14 * u24 - v24 * b3 * v14 + b1 * u14 + b2 * v14)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((b3 * u14 * u24 + v24 * b3 * v14 - b1 * u14 - b2 * v14) * aa3 ^ 4 + (((-b2 * v14 - b3) * u24 + b1 * (v14 * v24 + 0.1e1)) * aa1 - aa2 * (-b2 * u14 * u24 + (b1 * u14 + b3) * v24 - b2)) * aa3 ^ 3 + ((b3 * u14 * u24 + v24 * b3 * v14 - b1 * u14 - b2 * v14) * aa1 ^ 2 + (-b2 * u14 * u24 + (b1 * u14 - b3) * v24 + b2) * aa1 + aa2 * ((b3 * u14 * u24 + v24 * b3 * v14 - b1 * u14 - b2 * v14) * aa2 + (-b2 * v14 + b3) * u24 + b1 * (v14 * v24 - 0.1e1))) * aa3 ^ 2 + (((-b2 * v14 - b3) * u24 + b1 * (v14 * v24 + 0.1e1)) * aa1 ^ 3 + ((b2 * u14 * u24 + (-b1 * u14 - b3) * v24 + b2) * aa2 + 0.2e1 * b2 * u24 + (-0.2e1 * b3 * u14 - 0.2e1 * b1) * v24 + 0.2e1 * b2 * u14) * aa1 ^ 2 + aa2 * (((-b2 * v14 - b3) * u24 + b1 * (v14 * v24 + 0.1e1)) * aa2 - 0.2e1 * v24 * b3 * v14 + 0.2e1 * b3 * u14 * u24 - 0.2e1 * b1 * u14 + 0.2e1 * b2 * v14) * aa1 - aa2 ^ 2 * (aa2 * (-b2 * u14 * u24 + (b1 * u14 + b3) * v24 - b2) + (-0.2e1 * b3 * v14 - 0.2e1 * b2) * u24 + 0.2e1 * b1 * (v24 + v14))) * aa3 - ((-b2 * u14 * u24 + (b1 * u14 - b3) * v24 + b2) * aa1 + ((-b2 * v14 + b3) * u24 + b1 * (v14 * v24 - 0.1e1)) * aa2) * (aa1 ^ 2 + aa2 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((b2 * u14 * u24 + (-b1 * u14 + b3) * v24 - b2) * aa1 - ((-b2 * v14 + b3) * u24 + b1 * (v14 * v24 - 0.1e1)) * aa2) * aa3 ^ 2 + ((-0.2e1 * b2 * u24 + (0.2e1 * b3 * u14 + 0.2e1 * b1) * v24 - 0.2e1 * b2 * u14) * aa1 ^ 2 + 0.2e1 * (-b3 * u14 * u24 + v24 * b3 * v14 + b1 * u14 - b2 * v14) * aa2 * aa1 + 0.2e1 * aa2 ^ 2 * ((-b3 * v14 - b2) * u24 + b1 * (v24 + v14))) * aa3 + ((-b2 * u14 * u24 + (b1 * u14 - b3) * v24 + b2) * aa1 + ((-b2 * v14 + b3) * u24 + b1 * (v14 * v24 - 0.1e1)) * aa2) * (aa1 ^ 2 + aa2 ^ 2)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)); ((-v25 * aa2 ^ 2 + (aa3 * v15 * v25 - aa1 * u15 - aa3) * aa2 + v15 * aa3 ^ 2 + aa1 * aa3 * u15 * v25 + (-v25 + v15) * aa1 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (aa1 * v15 * v25 - v25 * u15 * aa2 - aa3 * u15 + aa1) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (-aa3 * v25 + aa2) * (aa1 * u15 + aa2 * v15 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((u25 * aa1 ^ 2 + (-aa3 * u15 * u25 + aa2 * v15 + aa3) * aa1 - u15 * aa3 ^ 2 - aa3 * v15 * u25 * aa2 - aa2 ^ 2 * (u15 - u25)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * (v15 * u25 * aa1 - aa2 * u15 * u25 + aa3 * v15 - aa2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) - (-aa3 * u25 + aa1) * (aa1 * u15 + aa2 * v15 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ((-v15 * u25 * aa1 ^ 2 + ((u15 * u25 - v15 * v25) * aa2 - aa3 * v25) * aa1 + v25 * u15 * aa2 ^ 2 + aa3 * u25 * aa2 + (u15 * v25 - u25 * v15) * aa3 ^ 2) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (u25 * aa1 + v25 * aa2 - aa3 * (u15 * u25 + v15 * v25)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (aa1 * v25 - aa2 * u25) * (aa1 * u15 + aa2 * v15 + aa3)) / (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) -(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * (-((b1 * v25 - b2 * u25 - v15 * (-b3 * u25 + b1)) * aa1 ^ 3 + ((v15 * (v25 * b3 - b2) + (-b3 * u25 + b1) * u15) * aa2 - aa3 * ((b1 * v25 - b2 * u25) * u15 - v25 * b3 + b2)) * aa1 ^ 2 + (((-v25 * b3 + b2) * u15 + b1 * v25 - b2 * u25) * aa2 ^ 2 + ((-b1 * v25 * v15 + b2 * u25 * v15 - b3 * u25 + b1) * aa3 + (-b1 * v25 + b2 * u25) * u15 - v25 * b3 + b2) * aa2 - (((v25 * b3 - b2) * u15 + v15 * (-b3 * u25 + b1)) * aa3 + (-b3 * u25 + b1) * u15 - v15 * (v25 * b3 - b2)) * aa3) * aa1 - (aa2 ^ 2 + aa3 ^ 2) * (b1 * v25 * v15 - b2 * u25 * v15 - b3 * u25 + b1)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((b1 * v25 * v15 - b2 * u25 * v15 - b3 * u25 + b1) * aa1 ^ 4 + (((-b1 * v25 + b2 * u25) * u15 - v25 * b3 + b2) * aa2 - aa3 * ((-b3 * u25 + b1) * u15 - v15 * (v25 * b3 - b2))) * aa1 ^ 3 + ((b1 * v25 * v15 - b2 * u25 * v15 - b3 * u25 + b1) * aa2 ^ 2 + ((b3 * u25 - b1) * u15 - v15 * (v25 * b3 - b2)) * aa2 + aa3 * ((b1 * v25 * v15 - b2 * u25 * v15 - b3 * u25 + b1) * aa3 + (b1 * v25 - b2 * u25) * u15 - v25 * b3 + b2)) * aa1 ^ 2 + (((-b1 * v25 + b2 * u25) * u15 - v25 * b3 + b2) * aa2 ^ 3 + (((b3 * u25 - b1) * u15 + v15 * (v25 * b3 - b2)) * aa3 + (0.2e1 * v25 * b3 - 0.2e1 * b2) * u15 - 0.2e1 * v15 * (-b3 * u25 + b1)) * aa2 ^ 2 - (((b1 * v25 - b2 * u25) * u15 + v25 * b3 - b2) * aa3 - 0.2e1 * b1 * v25 * v15 + 0.2e1 * b2 * u25 * v15 - 0.2e1 * b3 * u25 + 0.2e1 * b1) * aa3 * aa2 + 0.2e1 * ((u15 * (b3 * u25 / 0.2e1 - b1 / 0.2e1) + v15 * (v25 * b3 - b2) / 0.2e1) * aa3 + (v25 * b3 - b2) * u15 + b1 * v25 - b2 * u25) * aa3 ^ 2) * aa1 - (((b3 * u25 - b1) * u15 - v15 * (v25 * b3 - b2)) * aa2 + aa3 * ((b1 * v25 - b2 * u25) * u15 - v25 * b3 + b2)) * (aa2 ^ 2 + aa3 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((v15 * (v25 * b3 - b2) + (-b3 * u25 + b1) * u15) * aa2 - aa3 * ((b1 * v25 - b2 * u25) * u15 - v25 * b3 + b2)) * aa1 ^ 2 + (((-0.2e1 * v25 * b3 + 0.2e1 * b2) * u15 + 0.2e1 * v15 * (-b3 * u25 + b1)) * aa2 ^ 2 - 0.2e1 * aa3 * (b1 * v25 * v15 - b2 * u25 * v15 + b3 * u25 - b1) * aa2 - 0.2e1 * aa3 ^ 2 * ((v25 * b3 - b2) * u15 + b1 * v25 - b2 * u25)) * aa1 + (((b3 * u25 - b1) * u15 - v15 * (v25 * b3 - b2)) * aa2 + aa3 * ((b1 * v25 - b2 * u25) * u15 - v25 * b3 + b2)) * (aa2 ^ 2 + aa3 ^ 2)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) -(-((-b2 * u25 + b1 * v25 - (v25 * b3 - b2) * u15) * aa2 ^ 3 + ((v15 * (v25 * b3 - b2) + (-b3 * u25 + b1) * u15) * aa1 - aa3 * ((b1 * v25 - b2 * u25) * v15 + b3 * u25 - b1)) * aa2 ^ 2 + (((b3 * u25 - b1) * v15 + b1 * v25 - b2 * u25) * aa1 ^ 2 + ((-b1 * v25 * u15 + b2 * u15 * u25 + v25 * b3 - b2) * aa3 + (b1 * v25 - b2 * u25) * v15 - b3 * u25 + b1) * aa1 - (((v25 * b3 - b2) * u15 + v15 * (-b3 * u25 + b1)) * aa3 + (-v25 * b3 + b2) * v15 + (-b3 * u25 + b1) * u15) * aa3) * aa2 + (aa1 ^ 2 + aa3 ^ 2) * (b1 * v25 * u15 - b2 * u15 * u25 + v25 * b3 - b2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((-b1 * v25 * u15 + b2 * u15 * u25 - v25 * b3 + b2) * aa2 ^ 4 + (((b1 * v25 - b2 * u25) * v15 - b3 * u25 + b1) * aa1 - aa3 * ((-v25 * b3 + b2) * v15 + (-b3 * u25 + b1) * u15)) * aa2 ^ 3 + ((-b1 * v25 * u15 + b2 * u15 * u25 - v25 * b3 + b2) * aa1 ^ 2 + ((-v25 * b3 + b2) * v15 - (-b3 * u25 + b1) * u15) * aa1 - aa3 * ((b1 * v25 * u15 - b2 * u15 * u25 + v25 * b3 - b2) * aa3 + (-b1 * v25 + b2 * u25) * v15 - b3 * u25 + b1)) * aa2 ^ 2 + (((b1 * v25 - b2 * u25) * v15 - b3 * u25 + b1) * aa1 ^ 3 + ((-(-b3 * u25 + b1) * u15 + v15 * (v25 * b3 - b2)) * aa3 + (-0.2e1 * b3 * u25 + 0.2e1 * b1) * v15 - 0.2e1 * (v25 * b3 - b2) * u15) * aa1 ^ 2 + aa3 * (((b1 * v25 - b2 * u25) * v15 - b3 * u25 + b1) * aa3 + 0.2e1 * b1 * v25 * u15 - 0.2e1 * b2 * u15 * u25 - 0.2e1 * v25 * b3 + 0.2e1 * b2) * aa1 + 0.2e1 * (((v25 * b3 / 0.2e1 - b2 / 0.2e1) * v15 - (-b3 * u25 + b1) * u15 / 0.2e1) * aa3 + v15 * (-b3 * u25 + b1) + b1 * v25 - b2 * u25) * aa3 ^ 2) * aa2 - (aa1 ^ 2 + aa3 ^ 2) * (((-v25 * b3 + b2) * v15 - (-b3 * u25 + b1) * u15) * aa1 + aa3 * ((b1 * v25 - b2 * u25) * v15 + b3 * u25 - b1))) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((v15 * (v25 * b3 - b2) + (-b3 * u25 + b1) * u15) * aa1 - aa3 * ((b1 * v25 - b2 * u25) * v15 + b3 * u25 - b1)) * aa2 ^ 2 + (((0.2e1 * b3 * u25 - 0.2e1 * b1) * v15 + 0.2e1 * (v25 * b3 - b2) * u15) * aa1 ^ 2 - 0.2e1 * aa3 * (b1 * v25 * u15 - b2 * u15 * u25 - v25 * b3 + b2) * aa1 - 0.2e1 * aa3 ^ 2 * (v15 * (-b3 * u25 + b1) + b1 * v25 - b2 * u25)) * aa2 + (aa1 ^ 2 + aa3 ^ 2) * (((-v25 * b3 + b2) * v15 - (-b3 * u25 + b1) * u15) * aa1 + aa3 * ((b1 * v25 - b2 * u25) * v15 + b3 * u25 - b1))) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) -(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) ^ (-0.5e1 / 0.2e1) * (-((-b3 * u15 * v25 + b3 * u25 * v15 - b1 * v15 + b2 * u15) * aa3 ^ 3 + ((b2 * u15 * u25 + (-b1 * u15 + b3) * v25 - b2) * aa1 - ((-b2 * v15 + b3) * u25 + b1 * (v15 * v25 - 0.1e1)) * aa2) * aa3 ^ 2 + (((b3 * v15 - b2) * u25 + b1 * (v25 - v15)) * aa1 ^ 2 + ((-b3 * u15 * u25 + v25 * b3 * v15 + b1 * u15 - b2 * v15) * aa2 + (-b2 * v15 - b3) * u25 + b1 * (v15 * v25 + 0.1e1)) * aa1 + aa2 * ((-b2 * u25 + (-b3 * u15 + b1) * v25 + b2 * u15) * aa2 + b2 * u15 * u25 + (-b1 * u15 - b3) * v25 + b2)) * aa3 + (aa1 ^ 2 + aa2 ^ 2) * (-b3 * u15 * u25 - v25 * b3 * v15 + b1 * u15 + b2 * v15)) * (aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2) * sin(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + (((b3 * u15 * u25 + v25 * b3 * v15 - b1 * u15 - b2 * v15) * aa3 ^ 4 + (((-b2 * v15 - b3) * u25 + b1 * (v15 * v25 + 0.1e1)) * aa1 - aa2 * (-b2 * u15 * u25 + (b1 * u15 + b3) * v25 - b2)) * aa3 ^ 3 + ((b3 * u15 * u25 + v25 * b3 * v15 - b1 * u15 - b2 * v15) * aa1 ^ 2 + (-b2 * u15 * u25 + (b1 * u15 - b3) * v25 + b2) * aa1 + aa2 * ((b3 * u15 * u25 + v25 * b3 * v15 - b1 * u15 - b2 * v15) * aa2 + (-b2 * v15 + b3) * u25 + b1 * (v15 * v25 - 0.1e1))) * aa3 ^ 2 + (((-b2 * v15 - b3) * u25 + b1 * (v15 * v25 + 0.1e1)) * aa1 ^ 3 + ((b2 * u15 * u25 + (-b1 * u15 - b3) * v25 + b2) * aa2 + 0.2e1 * b2 * u25 + (-0.2e1 * b3 * u15 - 0.2e1 * b1) * v25 + 0.2e1 * b2 * u15) * aa1 ^ 2 + aa2 * (((-b2 * v15 - b3) * u25 + b1 * (v15 * v25 + 0.1e1)) * aa2 - 0.2e1 * v25 * b3 * v15 + 0.2e1 * b3 * u15 * u25 - 0.2e1 * b1 * u15 + 0.2e1 * b2 * v15) * aa1 - aa2 ^ 2 * (aa2 * (-b2 * u15 * u25 + (b1 * u15 + b3) * v25 - b2) + (-0.2e1 * b3 * v15 - 0.2e1 * b2) * u25 + 0.2e1 * b1 * (v25 + v15))) * aa3 - ((-b2 * u15 * u25 + (b1 * u15 - b3) * v25 + b2) * aa1 + ((-b2 * v15 + b3) * u25 + b1 * (v15 * v25 - 0.1e1)) * aa2) * (aa1 ^ 2 + aa2 ^ 2)) * cos(sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)) + ((b2 * u15 * u25 + (-b1 * u15 + b3) * v25 - b2) * aa1 - ((-b2 * v15 + b3) * u25 + b1 * (v15 * v25 - 0.1e1)) * aa2) * aa3 ^ 2 + ((-0.2e1 * b2 * u25 + (0.2e1 * b3 * u15 + 0.2e1 * b1) * v25 - 0.2e1 * b2 * u15) * aa1 ^ 2 + 0.2e1 * (-b3 * u15 * u25 + v25 * b3 * v15 + b1 * u15 - b2 * v15) * aa2 * aa1 + 0.2e1 * aa2 ^ 2 * ((-b3 * v15 - b2) * u25 + b1 * (v25 + v15))) * aa3 + ((-b2 * u15 * u25 + (b1 * u15 - b3) * v25 + b2) * aa1 + ((-b2 * v15 + b3) * u25 + b1 * (v15 * v25 - 0.1e1)) * aa2) * (aa1 ^ 2 + aa2 ^ 2)) * sqrt(aa1 ^ 2 + aa2 ^ 2 + aa3 ^ 2)); (b1 ^ 2 + b2 ^ 2 + b3 ^ 2) ^ (-0.1e1 / 0.2e1) * b1 (b1 ^ 2 + b2 ^ 2 + b3 ^ 2) ^ (-0.1e1 / 0.2e1) * b2 (b1 ^ 2 + b2 ^ 2 + b3 ^ 2) ^ (-0.1e1 / 0.2e1) * b3 0 0 0];
end